// mityarm_5csx_dev_board_mm_interconnect_0.v

// This file was auto-generated from altera_merlin_interconnect_wrapper_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 13.1 162 at 2014.02.17.18:44:59

`timescale 1 ps / 1 ps
module mityarm_5csx_dev_board_mm_interconnect_0 (
		input  wire [11:0]  hps_0_h2f_lw_axi_master_awid,                            //                     hps_0_h2f_lw_axi_master.awid
		input  wire [20:0]  hps_0_h2f_lw_axi_master_awaddr,                          //                                            .awaddr
		input  wire [3:0]   hps_0_h2f_lw_axi_master_awlen,                           //                                            .awlen
		input  wire [2:0]   hps_0_h2f_lw_axi_master_awsize,                          //                                            .awsize
		input  wire [1:0]   hps_0_h2f_lw_axi_master_awburst,                         //                                            .awburst
		input  wire [1:0]   hps_0_h2f_lw_axi_master_awlock,                          //                                            .awlock
		input  wire [3:0]   hps_0_h2f_lw_axi_master_awcache,                         //                                            .awcache
		input  wire [2:0]   hps_0_h2f_lw_axi_master_awprot,                          //                                            .awprot
		input  wire         hps_0_h2f_lw_axi_master_awvalid,                         //                                            .awvalid
		output wire         hps_0_h2f_lw_axi_master_awready,                         //                                            .awready
		input  wire [11:0]  hps_0_h2f_lw_axi_master_wid,                             //                                            .wid
		input  wire [31:0]  hps_0_h2f_lw_axi_master_wdata,                           //                                            .wdata
		input  wire [3:0]   hps_0_h2f_lw_axi_master_wstrb,                           //                                            .wstrb
		input  wire         hps_0_h2f_lw_axi_master_wlast,                           //                                            .wlast
		input  wire         hps_0_h2f_lw_axi_master_wvalid,                          //                                            .wvalid
		output wire         hps_0_h2f_lw_axi_master_wready,                          //                                            .wready
		output wire [11:0]  hps_0_h2f_lw_axi_master_bid,                             //                                            .bid
		output wire [1:0]   hps_0_h2f_lw_axi_master_bresp,                           //                                            .bresp
		output wire         hps_0_h2f_lw_axi_master_bvalid,                          //                                            .bvalid
		input  wire         hps_0_h2f_lw_axi_master_bready,                          //                                            .bready
		input  wire [11:0]  hps_0_h2f_lw_axi_master_arid,                            //                                            .arid
		input  wire [20:0]  hps_0_h2f_lw_axi_master_araddr,                          //                                            .araddr
		input  wire [3:0]   hps_0_h2f_lw_axi_master_arlen,                           //                                            .arlen
		input  wire [2:0]   hps_0_h2f_lw_axi_master_arsize,                          //                                            .arsize
		input  wire [1:0]   hps_0_h2f_lw_axi_master_arburst,                         //                                            .arburst
		input  wire [1:0]   hps_0_h2f_lw_axi_master_arlock,                          //                                            .arlock
		input  wire [3:0]   hps_0_h2f_lw_axi_master_arcache,                         //                                            .arcache
		input  wire [2:0]   hps_0_h2f_lw_axi_master_arprot,                          //                                            .arprot
		input  wire         hps_0_h2f_lw_axi_master_arvalid,                         //                                            .arvalid
		output wire         hps_0_h2f_lw_axi_master_arready,                         //                                            .arready
		output wire [11:0]  hps_0_h2f_lw_axi_master_rid,                             //                                            .rid
		output wire [31:0]  hps_0_h2f_lw_axi_master_rdata,                           //                                            .rdata
		output wire [1:0]   hps_0_h2f_lw_axi_master_rresp,                           //                                            .rresp
		output wire         hps_0_h2f_lw_axi_master_rlast,                           //                                            .rlast
		output wire         hps_0_h2f_lw_axi_master_rvalid,                          //                                            .rvalid
		input  wire         hps_0_h2f_lw_axi_master_rready,                          //                                            .rready
		input  wire         hps_0_h2f_user0_clock_clk,                               //                       hps_0_h2f_user0_clock.clk
		input  wire         sysid_qsys_reset_reset_bridge_in_reset_reset,            //      sysid_qsys_reset_reset_bridge_in_reset.reset
		output wire [2:0]   modular_sgdma_dispatcher_0_CSR_address,                  //              modular_sgdma_dispatcher_0_CSR.address
		output wire         modular_sgdma_dispatcher_0_CSR_write,                    //                                            .write
		output wire         modular_sgdma_dispatcher_0_CSR_read,                     //                                            .read
		input  wire [31:0]  modular_sgdma_dispatcher_0_CSR_readdata,                 //                                            .readdata
		output wire [31:0]  modular_sgdma_dispatcher_0_CSR_writedata,                //                                            .writedata
		output wire [3:0]   modular_sgdma_dispatcher_0_CSR_byteenable,               //                                            .byteenable
		output wire         modular_sgdma_dispatcher_0_Descriptor_Slave_write,       // modular_sgdma_dispatcher_0_Descriptor_Slave.write
		output wire [127:0] modular_sgdma_dispatcher_0_Descriptor_Slave_writedata,   //                                            .writedata
		output wire [15:0]  modular_sgdma_dispatcher_0_Descriptor_Slave_byteenable,  //                                            .byteenable
		input  wire         modular_sgdma_dispatcher_0_Descriptor_Slave_waitrequest, //                                            .waitrequest
		output wire [0:0]   sysid_qsys_control_slave_address,                        //                    sysid_qsys_control_slave.address
		input  wire [31:0]  sysid_qsys_control_slave_readdata                        //                                            .readdata
	);

	wire          sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent_m0_waitrequest;                                // sysid_qsys_control_slave_translator:uav_waitrequest -> sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent:m0_waitrequest
	wire    [2:0] sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent_m0_burstcount;                                 // sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent:m0_burstcount -> sysid_qsys_control_slave_translator:uav_burstcount
	wire   [31:0] sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent_m0_writedata;                                  // sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent:m0_writedata -> sysid_qsys_control_slave_translator:uav_writedata
	wire   [20:0] sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent_m0_address;                                    // sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent:m0_address -> sysid_qsys_control_slave_translator:uav_address
	wire          sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent_m0_write;                                      // sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent:m0_write -> sysid_qsys_control_slave_translator:uav_write
	wire          sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent_m0_lock;                                       // sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent:m0_lock -> sysid_qsys_control_slave_translator:uav_lock
	wire          sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent_m0_read;                                       // sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent:m0_read -> sysid_qsys_control_slave_translator:uav_read
	wire   [31:0] sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent_m0_readdata;                                   // sysid_qsys_control_slave_translator:uav_readdata -> sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent:m0_readdata
	wire          sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent_m0_readdatavalid;                              // sysid_qsys_control_slave_translator:uav_readdatavalid -> sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent:m0_readdatavalid
	wire          sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent_m0_debugaccess;                                // sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent:m0_debugaccess -> sysid_qsys_control_slave_translator:uav_debugaccess
	wire    [3:0] sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent_m0_byteenable;                                 // sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent:m0_byteenable -> sysid_qsys_control_slave_translator:uav_byteenable
	wire          sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent_rf_source_endofpacket;                         // sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent:rf_source_endofpacket -> sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent_rsp_fifo:in_endofpacket
	wire          sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent_rf_source_valid;                               // sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent:rf_source_valid -> sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent_rsp_fifo:in_valid
	wire          sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent_rf_source_startofpacket;                       // sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent:rf_source_startofpacket -> sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent_rsp_fifo:in_startofpacket
	wire  [116:0] sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent_rf_source_data;                                // sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent:rf_source_data -> sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent_rsp_fifo:in_data
	wire          sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent_rf_source_ready;                               // sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent_rsp_fifo:in_ready -> sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent:rf_source_ready
	wire          sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket;                      // sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent_rsp_fifo:out_endofpacket -> sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent:rf_sink_endofpacket
	wire          sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid;                            // sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent_rsp_fifo:out_valid -> sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent:rf_sink_valid
	wire          sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket;                    // sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent_rsp_fifo:out_startofpacket -> sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent:rf_sink_startofpacket
	wire  [116:0] sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data;                             // sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent_rsp_fifo:out_data -> sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent:rf_sink_data
	wire          sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready;                            // sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent:rf_sink_ready -> sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent_rsp_fifo:out_ready
	wire          sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid;                          // sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent:rdata_fifo_src_valid -> sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent_rdata_fifo:in_valid
	wire   [33:0] sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data;                           // sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent:rdata_fifo_src_data -> sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent_rdata_fifo:in_data
	wire          sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready;                          // sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent_rdata_fifo:in_ready -> sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent:rdata_fifo_src_ready
	wire          sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent_rdata_fifo_out_valid;                          // sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent_rdata_fifo:out_valid -> sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_valid
	wire   [33:0] sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent_rdata_fifo_out_data;                           // sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent_rdata_fifo:out_data -> sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_data
	wire          sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent_rdata_fifo_out_ready;                          // sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_ready -> sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent_rdata_fifo:out_ready
	wire          modular_sgdma_dispatcher_0_csr_translator_avalon_universal_slave_0_agent_m0_waitrequest;                          // modular_sgdma_dispatcher_0_CSR_translator:uav_waitrequest -> modular_sgdma_dispatcher_0_CSR_translator_avalon_universal_slave_0_agent:m0_waitrequest
	wire    [2:0] modular_sgdma_dispatcher_0_csr_translator_avalon_universal_slave_0_agent_m0_burstcount;                           // modular_sgdma_dispatcher_0_CSR_translator_avalon_universal_slave_0_agent:m0_burstcount -> modular_sgdma_dispatcher_0_CSR_translator:uav_burstcount
	wire   [31:0] modular_sgdma_dispatcher_0_csr_translator_avalon_universal_slave_0_agent_m0_writedata;                            // modular_sgdma_dispatcher_0_CSR_translator_avalon_universal_slave_0_agent:m0_writedata -> modular_sgdma_dispatcher_0_CSR_translator:uav_writedata
	wire   [20:0] modular_sgdma_dispatcher_0_csr_translator_avalon_universal_slave_0_agent_m0_address;                              // modular_sgdma_dispatcher_0_CSR_translator_avalon_universal_slave_0_agent:m0_address -> modular_sgdma_dispatcher_0_CSR_translator:uav_address
	wire          modular_sgdma_dispatcher_0_csr_translator_avalon_universal_slave_0_agent_m0_write;                                // modular_sgdma_dispatcher_0_CSR_translator_avalon_universal_slave_0_agent:m0_write -> modular_sgdma_dispatcher_0_CSR_translator:uav_write
	wire          modular_sgdma_dispatcher_0_csr_translator_avalon_universal_slave_0_agent_m0_lock;                                 // modular_sgdma_dispatcher_0_CSR_translator_avalon_universal_slave_0_agent:m0_lock -> modular_sgdma_dispatcher_0_CSR_translator:uav_lock
	wire          modular_sgdma_dispatcher_0_csr_translator_avalon_universal_slave_0_agent_m0_read;                                 // modular_sgdma_dispatcher_0_CSR_translator_avalon_universal_slave_0_agent:m0_read -> modular_sgdma_dispatcher_0_CSR_translator:uav_read
	wire   [31:0] modular_sgdma_dispatcher_0_csr_translator_avalon_universal_slave_0_agent_m0_readdata;                             // modular_sgdma_dispatcher_0_CSR_translator:uav_readdata -> modular_sgdma_dispatcher_0_CSR_translator_avalon_universal_slave_0_agent:m0_readdata
	wire          modular_sgdma_dispatcher_0_csr_translator_avalon_universal_slave_0_agent_m0_readdatavalid;                        // modular_sgdma_dispatcher_0_CSR_translator:uav_readdatavalid -> modular_sgdma_dispatcher_0_CSR_translator_avalon_universal_slave_0_agent:m0_readdatavalid
	wire          modular_sgdma_dispatcher_0_csr_translator_avalon_universal_slave_0_agent_m0_debugaccess;                          // modular_sgdma_dispatcher_0_CSR_translator_avalon_universal_slave_0_agent:m0_debugaccess -> modular_sgdma_dispatcher_0_CSR_translator:uav_debugaccess
	wire    [3:0] modular_sgdma_dispatcher_0_csr_translator_avalon_universal_slave_0_agent_m0_byteenable;                           // modular_sgdma_dispatcher_0_CSR_translator_avalon_universal_slave_0_agent:m0_byteenable -> modular_sgdma_dispatcher_0_CSR_translator:uav_byteenable
	wire          modular_sgdma_dispatcher_0_csr_translator_avalon_universal_slave_0_agent_rf_source_endofpacket;                   // modular_sgdma_dispatcher_0_CSR_translator_avalon_universal_slave_0_agent:rf_source_endofpacket -> modular_sgdma_dispatcher_0_CSR_translator_avalon_universal_slave_0_agent_rsp_fifo:in_endofpacket
	wire          modular_sgdma_dispatcher_0_csr_translator_avalon_universal_slave_0_agent_rf_source_valid;                         // modular_sgdma_dispatcher_0_CSR_translator_avalon_universal_slave_0_agent:rf_source_valid -> modular_sgdma_dispatcher_0_CSR_translator_avalon_universal_slave_0_agent_rsp_fifo:in_valid
	wire          modular_sgdma_dispatcher_0_csr_translator_avalon_universal_slave_0_agent_rf_source_startofpacket;                 // modular_sgdma_dispatcher_0_CSR_translator_avalon_universal_slave_0_agent:rf_source_startofpacket -> modular_sgdma_dispatcher_0_CSR_translator_avalon_universal_slave_0_agent_rsp_fifo:in_startofpacket
	wire  [116:0] modular_sgdma_dispatcher_0_csr_translator_avalon_universal_slave_0_agent_rf_source_data;                          // modular_sgdma_dispatcher_0_CSR_translator_avalon_universal_slave_0_agent:rf_source_data -> modular_sgdma_dispatcher_0_CSR_translator_avalon_universal_slave_0_agent_rsp_fifo:in_data
	wire          modular_sgdma_dispatcher_0_csr_translator_avalon_universal_slave_0_agent_rf_source_ready;                         // modular_sgdma_dispatcher_0_CSR_translator_avalon_universal_slave_0_agent_rsp_fifo:in_ready -> modular_sgdma_dispatcher_0_CSR_translator_avalon_universal_slave_0_agent:rf_source_ready
	wire          modular_sgdma_dispatcher_0_csr_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket;                // modular_sgdma_dispatcher_0_CSR_translator_avalon_universal_slave_0_agent_rsp_fifo:out_endofpacket -> modular_sgdma_dispatcher_0_CSR_translator_avalon_universal_slave_0_agent:rf_sink_endofpacket
	wire          modular_sgdma_dispatcher_0_csr_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid;                      // modular_sgdma_dispatcher_0_CSR_translator_avalon_universal_slave_0_agent_rsp_fifo:out_valid -> modular_sgdma_dispatcher_0_CSR_translator_avalon_universal_slave_0_agent:rf_sink_valid
	wire          modular_sgdma_dispatcher_0_csr_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket;              // modular_sgdma_dispatcher_0_CSR_translator_avalon_universal_slave_0_agent_rsp_fifo:out_startofpacket -> modular_sgdma_dispatcher_0_CSR_translator_avalon_universal_slave_0_agent:rf_sink_startofpacket
	wire  [116:0] modular_sgdma_dispatcher_0_csr_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data;                       // modular_sgdma_dispatcher_0_CSR_translator_avalon_universal_slave_0_agent_rsp_fifo:out_data -> modular_sgdma_dispatcher_0_CSR_translator_avalon_universal_slave_0_agent:rf_sink_data
	wire          modular_sgdma_dispatcher_0_csr_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready;                      // modular_sgdma_dispatcher_0_CSR_translator_avalon_universal_slave_0_agent:rf_sink_ready -> modular_sgdma_dispatcher_0_CSR_translator_avalon_universal_slave_0_agent_rsp_fifo:out_ready
	wire          modular_sgdma_dispatcher_0_csr_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid;                    // modular_sgdma_dispatcher_0_CSR_translator_avalon_universal_slave_0_agent:rdata_fifo_src_valid -> modular_sgdma_dispatcher_0_CSR_translator_avalon_universal_slave_0_agent_rdata_fifo:in_valid
	wire   [33:0] modular_sgdma_dispatcher_0_csr_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data;                     // modular_sgdma_dispatcher_0_CSR_translator_avalon_universal_slave_0_agent:rdata_fifo_src_data -> modular_sgdma_dispatcher_0_CSR_translator_avalon_universal_slave_0_agent_rdata_fifo:in_data
	wire          modular_sgdma_dispatcher_0_csr_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready;                    // modular_sgdma_dispatcher_0_CSR_translator_avalon_universal_slave_0_agent_rdata_fifo:in_ready -> modular_sgdma_dispatcher_0_CSR_translator_avalon_universal_slave_0_agent:rdata_fifo_src_ready
	wire          modular_sgdma_dispatcher_0_csr_translator_avalon_universal_slave_0_agent_rdata_fifo_out_valid;                    // modular_sgdma_dispatcher_0_CSR_translator_avalon_universal_slave_0_agent_rdata_fifo:out_valid -> modular_sgdma_dispatcher_0_CSR_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_valid
	wire   [33:0] modular_sgdma_dispatcher_0_csr_translator_avalon_universal_slave_0_agent_rdata_fifo_out_data;                     // modular_sgdma_dispatcher_0_CSR_translator_avalon_universal_slave_0_agent_rdata_fifo:out_data -> modular_sgdma_dispatcher_0_CSR_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_data
	wire          modular_sgdma_dispatcher_0_csr_translator_avalon_universal_slave_0_agent_rdata_fifo_out_ready;                    // modular_sgdma_dispatcher_0_CSR_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_ready -> modular_sgdma_dispatcher_0_CSR_translator_avalon_universal_slave_0_agent_rdata_fifo:out_ready
	wire          modular_sgdma_dispatcher_0_descriptor_slave_translator_avalon_universal_slave_0_agent_m0_waitrequest;             // modular_sgdma_dispatcher_0_Descriptor_Slave_translator:uav_waitrequest -> modular_sgdma_dispatcher_0_Descriptor_Slave_translator_avalon_universal_slave_0_agent:m0_waitrequest
	wire    [4:0] modular_sgdma_dispatcher_0_descriptor_slave_translator_avalon_universal_slave_0_agent_m0_burstcount;              // modular_sgdma_dispatcher_0_Descriptor_Slave_translator_avalon_universal_slave_0_agent:m0_burstcount -> modular_sgdma_dispatcher_0_Descriptor_Slave_translator:uav_burstcount
	wire  [127:0] modular_sgdma_dispatcher_0_descriptor_slave_translator_avalon_universal_slave_0_agent_m0_writedata;               // modular_sgdma_dispatcher_0_Descriptor_Slave_translator_avalon_universal_slave_0_agent:m0_writedata -> modular_sgdma_dispatcher_0_Descriptor_Slave_translator:uav_writedata
	wire   [20:0] modular_sgdma_dispatcher_0_descriptor_slave_translator_avalon_universal_slave_0_agent_m0_address;                 // modular_sgdma_dispatcher_0_Descriptor_Slave_translator_avalon_universal_slave_0_agent:m0_address -> modular_sgdma_dispatcher_0_Descriptor_Slave_translator:uav_address
	wire          modular_sgdma_dispatcher_0_descriptor_slave_translator_avalon_universal_slave_0_agent_m0_write;                   // modular_sgdma_dispatcher_0_Descriptor_Slave_translator_avalon_universal_slave_0_agent:m0_write -> modular_sgdma_dispatcher_0_Descriptor_Slave_translator:uav_write
	wire          modular_sgdma_dispatcher_0_descriptor_slave_translator_avalon_universal_slave_0_agent_m0_lock;                    // modular_sgdma_dispatcher_0_Descriptor_Slave_translator_avalon_universal_slave_0_agent:m0_lock -> modular_sgdma_dispatcher_0_Descriptor_Slave_translator:uav_lock
	wire          modular_sgdma_dispatcher_0_descriptor_slave_translator_avalon_universal_slave_0_agent_m0_read;                    // modular_sgdma_dispatcher_0_Descriptor_Slave_translator_avalon_universal_slave_0_agent:m0_read -> modular_sgdma_dispatcher_0_Descriptor_Slave_translator:uav_read
	wire  [127:0] modular_sgdma_dispatcher_0_descriptor_slave_translator_avalon_universal_slave_0_agent_m0_readdata;                // modular_sgdma_dispatcher_0_Descriptor_Slave_translator:uav_readdata -> modular_sgdma_dispatcher_0_Descriptor_Slave_translator_avalon_universal_slave_0_agent:m0_readdata
	wire          modular_sgdma_dispatcher_0_descriptor_slave_translator_avalon_universal_slave_0_agent_m0_readdatavalid;           // modular_sgdma_dispatcher_0_Descriptor_Slave_translator:uav_readdatavalid -> modular_sgdma_dispatcher_0_Descriptor_Slave_translator_avalon_universal_slave_0_agent:m0_readdatavalid
	wire          modular_sgdma_dispatcher_0_descriptor_slave_translator_avalon_universal_slave_0_agent_m0_debugaccess;             // modular_sgdma_dispatcher_0_Descriptor_Slave_translator_avalon_universal_slave_0_agent:m0_debugaccess -> modular_sgdma_dispatcher_0_Descriptor_Slave_translator:uav_debugaccess
	wire   [15:0] modular_sgdma_dispatcher_0_descriptor_slave_translator_avalon_universal_slave_0_agent_m0_byteenable;              // modular_sgdma_dispatcher_0_Descriptor_Slave_translator_avalon_universal_slave_0_agent:m0_byteenable -> modular_sgdma_dispatcher_0_Descriptor_Slave_translator:uav_byteenable
	wire          modular_sgdma_dispatcher_0_descriptor_slave_translator_avalon_universal_slave_0_agent_rf_source_endofpacket;      // modular_sgdma_dispatcher_0_Descriptor_Slave_translator_avalon_universal_slave_0_agent:rf_source_endofpacket -> modular_sgdma_dispatcher_0_Descriptor_Slave_translator_avalon_universal_slave_0_agent_rsp_fifo:in_endofpacket
	wire          modular_sgdma_dispatcher_0_descriptor_slave_translator_avalon_universal_slave_0_agent_rf_source_valid;            // modular_sgdma_dispatcher_0_Descriptor_Slave_translator_avalon_universal_slave_0_agent:rf_source_valid -> modular_sgdma_dispatcher_0_Descriptor_Slave_translator_avalon_universal_slave_0_agent_rsp_fifo:in_valid
	wire          modular_sgdma_dispatcher_0_descriptor_slave_translator_avalon_universal_slave_0_agent_rf_source_startofpacket;    // modular_sgdma_dispatcher_0_Descriptor_Slave_translator_avalon_universal_slave_0_agent:rf_source_startofpacket -> modular_sgdma_dispatcher_0_Descriptor_Slave_translator_avalon_universal_slave_0_agent_rsp_fifo:in_startofpacket
	wire  [224:0] modular_sgdma_dispatcher_0_descriptor_slave_translator_avalon_universal_slave_0_agent_rf_source_data;             // modular_sgdma_dispatcher_0_Descriptor_Slave_translator_avalon_universal_slave_0_agent:rf_source_data -> modular_sgdma_dispatcher_0_Descriptor_Slave_translator_avalon_universal_slave_0_agent_rsp_fifo:in_data
	wire          modular_sgdma_dispatcher_0_descriptor_slave_translator_avalon_universal_slave_0_agent_rf_source_ready;            // modular_sgdma_dispatcher_0_Descriptor_Slave_translator_avalon_universal_slave_0_agent_rsp_fifo:in_ready -> modular_sgdma_dispatcher_0_Descriptor_Slave_translator_avalon_universal_slave_0_agent:rf_source_ready
	wire          modular_sgdma_dispatcher_0_descriptor_slave_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket;   // modular_sgdma_dispatcher_0_Descriptor_Slave_translator_avalon_universal_slave_0_agent_rsp_fifo:out_endofpacket -> modular_sgdma_dispatcher_0_Descriptor_Slave_translator_avalon_universal_slave_0_agent:rf_sink_endofpacket
	wire          modular_sgdma_dispatcher_0_descriptor_slave_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid;         // modular_sgdma_dispatcher_0_Descriptor_Slave_translator_avalon_universal_slave_0_agent_rsp_fifo:out_valid -> modular_sgdma_dispatcher_0_Descriptor_Slave_translator_avalon_universal_slave_0_agent:rf_sink_valid
	wire          modular_sgdma_dispatcher_0_descriptor_slave_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket; // modular_sgdma_dispatcher_0_Descriptor_Slave_translator_avalon_universal_slave_0_agent_rsp_fifo:out_startofpacket -> modular_sgdma_dispatcher_0_Descriptor_Slave_translator_avalon_universal_slave_0_agent:rf_sink_startofpacket
	wire  [224:0] modular_sgdma_dispatcher_0_descriptor_slave_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data;          // modular_sgdma_dispatcher_0_Descriptor_Slave_translator_avalon_universal_slave_0_agent_rsp_fifo:out_data -> modular_sgdma_dispatcher_0_Descriptor_Slave_translator_avalon_universal_slave_0_agent:rf_sink_data
	wire          modular_sgdma_dispatcher_0_descriptor_slave_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready;         // modular_sgdma_dispatcher_0_Descriptor_Slave_translator_avalon_universal_slave_0_agent:rf_sink_ready -> modular_sgdma_dispatcher_0_Descriptor_Slave_translator_avalon_universal_slave_0_agent_rsp_fifo:out_ready
	wire          modular_sgdma_dispatcher_0_descriptor_slave_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid;       // modular_sgdma_dispatcher_0_Descriptor_Slave_translator_avalon_universal_slave_0_agent:rdata_fifo_src_valid -> modular_sgdma_dispatcher_0_Descriptor_Slave_translator_avalon_universal_slave_0_agent_rdata_fifo:in_valid
	wire  [129:0] modular_sgdma_dispatcher_0_descriptor_slave_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data;        // modular_sgdma_dispatcher_0_Descriptor_Slave_translator_avalon_universal_slave_0_agent:rdata_fifo_src_data -> modular_sgdma_dispatcher_0_Descriptor_Slave_translator_avalon_universal_slave_0_agent_rdata_fifo:in_data
	wire          modular_sgdma_dispatcher_0_descriptor_slave_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready;       // modular_sgdma_dispatcher_0_Descriptor_Slave_translator_avalon_universal_slave_0_agent_rdata_fifo:in_ready -> modular_sgdma_dispatcher_0_Descriptor_Slave_translator_avalon_universal_slave_0_agent:rdata_fifo_src_ready
	wire          modular_sgdma_dispatcher_0_descriptor_slave_translator_avalon_universal_slave_0_agent_rdata_fifo_out_valid;       // modular_sgdma_dispatcher_0_Descriptor_Slave_translator_avalon_universal_slave_0_agent_rdata_fifo:out_valid -> modular_sgdma_dispatcher_0_Descriptor_Slave_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_valid
	wire  [129:0] modular_sgdma_dispatcher_0_descriptor_slave_translator_avalon_universal_slave_0_agent_rdata_fifo_out_data;        // modular_sgdma_dispatcher_0_Descriptor_Slave_translator_avalon_universal_slave_0_agent_rdata_fifo:out_data -> modular_sgdma_dispatcher_0_Descriptor_Slave_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_data
	wire          modular_sgdma_dispatcher_0_descriptor_slave_translator_avalon_universal_slave_0_agent_rdata_fifo_out_ready;       // modular_sgdma_dispatcher_0_Descriptor_Slave_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_ready -> modular_sgdma_dispatcher_0_Descriptor_Slave_translator_avalon_universal_slave_0_agent_rdata_fifo:out_ready
	wire          hps_0_h2f_lw_axi_master_agent_write_cp_endofpacket;                                                               // hps_0_h2f_lw_axi_master_agent:write_cp_endofpacket -> addr_router:sink_endofpacket
	wire          hps_0_h2f_lw_axi_master_agent_write_cp_valid;                                                                     // hps_0_h2f_lw_axi_master_agent:write_cp_valid -> addr_router:sink_valid
	wire          hps_0_h2f_lw_axi_master_agent_write_cp_startofpacket;                                                             // hps_0_h2f_lw_axi_master_agent:write_cp_startofpacket -> addr_router:sink_startofpacket
	wire  [115:0] hps_0_h2f_lw_axi_master_agent_write_cp_data;                                                                      // hps_0_h2f_lw_axi_master_agent:write_cp_data -> addr_router:sink_data
	wire          hps_0_h2f_lw_axi_master_agent_write_cp_ready;                                                                     // addr_router:sink_ready -> hps_0_h2f_lw_axi_master_agent:write_cp_ready
	wire          hps_0_h2f_lw_axi_master_agent_read_cp_endofpacket;                                                                // hps_0_h2f_lw_axi_master_agent:read_cp_endofpacket -> addr_router_001:sink_endofpacket
	wire          hps_0_h2f_lw_axi_master_agent_read_cp_valid;                                                                      // hps_0_h2f_lw_axi_master_agent:read_cp_valid -> addr_router_001:sink_valid
	wire          hps_0_h2f_lw_axi_master_agent_read_cp_startofpacket;                                                              // hps_0_h2f_lw_axi_master_agent:read_cp_startofpacket -> addr_router_001:sink_startofpacket
	wire  [115:0] hps_0_h2f_lw_axi_master_agent_read_cp_data;                                                                       // hps_0_h2f_lw_axi_master_agent:read_cp_data -> addr_router_001:sink_data
	wire          hps_0_h2f_lw_axi_master_agent_read_cp_ready;                                                                      // addr_router_001:sink_ready -> hps_0_h2f_lw_axi_master_agent:read_cp_ready
	wire          sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent_rp_endofpacket;                                // sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent:rp_endofpacket -> id_router:sink_endofpacket
	wire          sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent_rp_valid;                                      // sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent:rp_valid -> id_router:sink_valid
	wire          sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent_rp_startofpacket;                              // sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent:rp_startofpacket -> id_router:sink_startofpacket
	wire  [115:0] sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent_rp_data;                                       // sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent:rp_data -> id_router:sink_data
	wire          sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent_rp_ready;                                      // id_router:sink_ready -> sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent:rp_ready
	wire          id_router_src_endofpacket;                                                                                        // id_router:src_endofpacket -> rsp_xbar_demux:sink_endofpacket
	wire          id_router_src_valid;                                                                                              // id_router:src_valid -> rsp_xbar_demux:sink_valid
	wire          id_router_src_startofpacket;                                                                                      // id_router:src_startofpacket -> rsp_xbar_demux:sink_startofpacket
	wire  [115:0] id_router_src_data;                                                                                               // id_router:src_data -> rsp_xbar_demux:sink_data
	wire    [2:0] id_router_src_channel;                                                                                            // id_router:src_channel -> rsp_xbar_demux:sink_channel
	wire          id_router_src_ready;                                                                                              // rsp_xbar_demux:sink_ready -> id_router:src_ready
	wire          modular_sgdma_dispatcher_0_csr_translator_avalon_universal_slave_0_agent_rp_endofpacket;                          // modular_sgdma_dispatcher_0_CSR_translator_avalon_universal_slave_0_agent:rp_endofpacket -> id_router_001:sink_endofpacket
	wire          modular_sgdma_dispatcher_0_csr_translator_avalon_universal_slave_0_agent_rp_valid;                                // modular_sgdma_dispatcher_0_CSR_translator_avalon_universal_slave_0_agent:rp_valid -> id_router_001:sink_valid
	wire          modular_sgdma_dispatcher_0_csr_translator_avalon_universal_slave_0_agent_rp_startofpacket;                        // modular_sgdma_dispatcher_0_CSR_translator_avalon_universal_slave_0_agent:rp_startofpacket -> id_router_001:sink_startofpacket
	wire  [115:0] modular_sgdma_dispatcher_0_csr_translator_avalon_universal_slave_0_agent_rp_data;                                 // modular_sgdma_dispatcher_0_CSR_translator_avalon_universal_slave_0_agent:rp_data -> id_router_001:sink_data
	wire          modular_sgdma_dispatcher_0_csr_translator_avalon_universal_slave_0_agent_rp_ready;                                // id_router_001:sink_ready -> modular_sgdma_dispatcher_0_CSR_translator_avalon_universal_slave_0_agent:rp_ready
	wire          id_router_001_src_endofpacket;                                                                                    // id_router_001:src_endofpacket -> rsp_xbar_demux_001:sink_endofpacket
	wire          id_router_001_src_valid;                                                                                          // id_router_001:src_valid -> rsp_xbar_demux_001:sink_valid
	wire          id_router_001_src_startofpacket;                                                                                  // id_router_001:src_startofpacket -> rsp_xbar_demux_001:sink_startofpacket
	wire  [115:0] id_router_001_src_data;                                                                                           // id_router_001:src_data -> rsp_xbar_demux_001:sink_data
	wire    [2:0] id_router_001_src_channel;                                                                                        // id_router_001:src_channel -> rsp_xbar_demux_001:sink_channel
	wire          id_router_001_src_ready;                                                                                          // rsp_xbar_demux_001:sink_ready -> id_router_001:src_ready
	wire          modular_sgdma_dispatcher_0_descriptor_slave_translator_avalon_universal_slave_0_agent_rp_endofpacket;             // modular_sgdma_dispatcher_0_Descriptor_Slave_translator_avalon_universal_slave_0_agent:rp_endofpacket -> id_router_002:sink_endofpacket
	wire          modular_sgdma_dispatcher_0_descriptor_slave_translator_avalon_universal_slave_0_agent_rp_valid;                   // modular_sgdma_dispatcher_0_Descriptor_Slave_translator_avalon_universal_slave_0_agent:rp_valid -> id_router_002:sink_valid
	wire          modular_sgdma_dispatcher_0_descriptor_slave_translator_avalon_universal_slave_0_agent_rp_startofpacket;           // modular_sgdma_dispatcher_0_Descriptor_Slave_translator_avalon_universal_slave_0_agent:rp_startofpacket -> id_router_002:sink_startofpacket
	wire  [223:0] modular_sgdma_dispatcher_0_descriptor_slave_translator_avalon_universal_slave_0_agent_rp_data;                    // modular_sgdma_dispatcher_0_Descriptor_Slave_translator_avalon_universal_slave_0_agent:rp_data -> id_router_002:sink_data
	wire          modular_sgdma_dispatcher_0_descriptor_slave_translator_avalon_universal_slave_0_agent_rp_ready;                   // id_router_002:sink_ready -> modular_sgdma_dispatcher_0_Descriptor_Slave_translator_avalon_universal_slave_0_agent:rp_ready
	wire          addr_router_src_endofpacket;                                                                                      // addr_router:src_endofpacket -> limiter:cmd_sink_endofpacket
	wire          addr_router_src_valid;                                                                                            // addr_router:src_valid -> limiter:cmd_sink_valid
	wire          addr_router_src_startofpacket;                                                                                    // addr_router:src_startofpacket -> limiter:cmd_sink_startofpacket
	wire  [115:0] addr_router_src_data;                                                                                             // addr_router:src_data -> limiter:cmd_sink_data
	wire    [2:0] addr_router_src_channel;                                                                                          // addr_router:src_channel -> limiter:cmd_sink_channel
	wire          addr_router_src_ready;                                                                                            // limiter:cmd_sink_ready -> addr_router:src_ready
	wire          limiter_cmd_src_endofpacket;                                                                                      // limiter:cmd_src_endofpacket -> cmd_xbar_demux:sink_endofpacket
	wire          limiter_cmd_src_startofpacket;                                                                                    // limiter:cmd_src_startofpacket -> cmd_xbar_demux:sink_startofpacket
	wire  [115:0] limiter_cmd_src_data;                                                                                             // limiter:cmd_src_data -> cmd_xbar_demux:sink_data
	wire    [2:0] limiter_cmd_src_channel;                                                                                          // limiter:cmd_src_channel -> cmd_xbar_demux:sink_channel
	wire          limiter_cmd_src_ready;                                                                                            // cmd_xbar_demux:sink_ready -> limiter:cmd_src_ready
	wire          rsp_xbar_mux_src_endofpacket;                                                                                     // rsp_xbar_mux:src_endofpacket -> limiter:rsp_sink_endofpacket
	wire          rsp_xbar_mux_src_valid;                                                                                           // rsp_xbar_mux:src_valid -> limiter:rsp_sink_valid
	wire          rsp_xbar_mux_src_startofpacket;                                                                                   // rsp_xbar_mux:src_startofpacket -> limiter:rsp_sink_startofpacket
	wire  [115:0] rsp_xbar_mux_src_data;                                                                                            // rsp_xbar_mux:src_data -> limiter:rsp_sink_data
	wire    [2:0] rsp_xbar_mux_src_channel;                                                                                         // rsp_xbar_mux:src_channel -> limiter:rsp_sink_channel
	wire          rsp_xbar_mux_src_ready;                                                                                           // limiter:rsp_sink_ready -> rsp_xbar_mux:src_ready
	wire          limiter_rsp_src_endofpacket;                                                                                      // limiter:rsp_src_endofpacket -> hps_0_h2f_lw_axi_master_agent:write_rp_endofpacket
	wire          limiter_rsp_src_valid;                                                                                            // limiter:rsp_src_valid -> hps_0_h2f_lw_axi_master_agent:write_rp_valid
	wire          limiter_rsp_src_startofpacket;                                                                                    // limiter:rsp_src_startofpacket -> hps_0_h2f_lw_axi_master_agent:write_rp_startofpacket
	wire  [115:0] limiter_rsp_src_data;                                                                                             // limiter:rsp_src_data -> hps_0_h2f_lw_axi_master_agent:write_rp_data
	wire    [2:0] limiter_rsp_src_channel;                                                                                          // limiter:rsp_src_channel -> hps_0_h2f_lw_axi_master_agent:write_rp_channel
	wire          limiter_rsp_src_ready;                                                                                            // hps_0_h2f_lw_axi_master_agent:write_rp_ready -> limiter:rsp_src_ready
	wire          addr_router_001_src_endofpacket;                                                                                  // addr_router_001:src_endofpacket -> limiter_001:cmd_sink_endofpacket
	wire          addr_router_001_src_valid;                                                                                        // addr_router_001:src_valid -> limiter_001:cmd_sink_valid
	wire          addr_router_001_src_startofpacket;                                                                                // addr_router_001:src_startofpacket -> limiter_001:cmd_sink_startofpacket
	wire  [115:0] addr_router_001_src_data;                                                                                         // addr_router_001:src_data -> limiter_001:cmd_sink_data
	wire    [2:0] addr_router_001_src_channel;                                                                                      // addr_router_001:src_channel -> limiter_001:cmd_sink_channel
	wire          addr_router_001_src_ready;                                                                                        // limiter_001:cmd_sink_ready -> addr_router_001:src_ready
	wire          limiter_001_cmd_src_endofpacket;                                                                                  // limiter_001:cmd_src_endofpacket -> cmd_xbar_demux_001:sink_endofpacket
	wire          limiter_001_cmd_src_startofpacket;                                                                                // limiter_001:cmd_src_startofpacket -> cmd_xbar_demux_001:sink_startofpacket
	wire  [115:0] limiter_001_cmd_src_data;                                                                                         // limiter_001:cmd_src_data -> cmd_xbar_demux_001:sink_data
	wire    [2:0] limiter_001_cmd_src_channel;                                                                                      // limiter_001:cmd_src_channel -> cmd_xbar_demux_001:sink_channel
	wire          limiter_001_cmd_src_ready;                                                                                        // cmd_xbar_demux_001:sink_ready -> limiter_001:cmd_src_ready
	wire          rsp_xbar_mux_001_src_endofpacket;                                                                                 // rsp_xbar_mux_001:src_endofpacket -> limiter_001:rsp_sink_endofpacket
	wire          rsp_xbar_mux_001_src_valid;                                                                                       // rsp_xbar_mux_001:src_valid -> limiter_001:rsp_sink_valid
	wire          rsp_xbar_mux_001_src_startofpacket;                                                                               // rsp_xbar_mux_001:src_startofpacket -> limiter_001:rsp_sink_startofpacket
	wire  [115:0] rsp_xbar_mux_001_src_data;                                                                                        // rsp_xbar_mux_001:src_data -> limiter_001:rsp_sink_data
	wire    [2:0] rsp_xbar_mux_001_src_channel;                                                                                     // rsp_xbar_mux_001:src_channel -> limiter_001:rsp_sink_channel
	wire          rsp_xbar_mux_001_src_ready;                                                                                       // limiter_001:rsp_sink_ready -> rsp_xbar_mux_001:src_ready
	wire          limiter_001_rsp_src_endofpacket;                                                                                  // limiter_001:rsp_src_endofpacket -> hps_0_h2f_lw_axi_master_agent:read_rp_endofpacket
	wire          limiter_001_rsp_src_valid;                                                                                        // limiter_001:rsp_src_valid -> hps_0_h2f_lw_axi_master_agent:read_rp_valid
	wire          limiter_001_rsp_src_startofpacket;                                                                                // limiter_001:rsp_src_startofpacket -> hps_0_h2f_lw_axi_master_agent:read_rp_startofpacket
	wire  [115:0] limiter_001_rsp_src_data;                                                                                         // limiter_001:rsp_src_data -> hps_0_h2f_lw_axi_master_agent:read_rp_data
	wire    [2:0] limiter_001_rsp_src_channel;                                                                                      // limiter_001:rsp_src_channel -> hps_0_h2f_lw_axi_master_agent:read_rp_channel
	wire          limiter_001_rsp_src_ready;                                                                                        // hps_0_h2f_lw_axi_master_agent:read_rp_ready -> limiter_001:rsp_src_ready
	wire          cmd_xbar_mux_src_endofpacket;                                                                                     // cmd_xbar_mux:src_endofpacket -> burst_adapter:sink0_endofpacket
	wire          cmd_xbar_mux_src_valid;                                                                                           // cmd_xbar_mux:src_valid -> burst_adapter:sink0_valid
	wire          cmd_xbar_mux_src_startofpacket;                                                                                   // cmd_xbar_mux:src_startofpacket -> burst_adapter:sink0_startofpacket
	wire  [115:0] cmd_xbar_mux_src_data;                                                                                            // cmd_xbar_mux:src_data -> burst_adapter:sink0_data
	wire    [2:0] cmd_xbar_mux_src_channel;                                                                                         // cmd_xbar_mux:src_channel -> burst_adapter:sink0_channel
	wire          cmd_xbar_mux_src_ready;                                                                                           // burst_adapter:sink0_ready -> cmd_xbar_mux:src_ready
	wire          burst_adapter_source0_endofpacket;                                                                                // burst_adapter:source0_endofpacket -> sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent:cp_endofpacket
	wire          burst_adapter_source0_valid;                                                                                      // burst_adapter:source0_valid -> sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent:cp_valid
	wire          burst_adapter_source0_startofpacket;                                                                              // burst_adapter:source0_startofpacket -> sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent:cp_startofpacket
	wire  [115:0] burst_adapter_source0_data;                                                                                       // burst_adapter:source0_data -> sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent:cp_data
	wire          burst_adapter_source0_ready;                                                                                      // sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent:cp_ready -> burst_adapter:source0_ready
	wire    [2:0] burst_adapter_source0_channel;                                                                                    // burst_adapter:source0_channel -> sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent:cp_channel
	wire          cmd_xbar_mux_001_src_endofpacket;                                                                                 // cmd_xbar_mux_001:src_endofpacket -> burst_adapter_001:sink0_endofpacket
	wire          cmd_xbar_mux_001_src_valid;                                                                                       // cmd_xbar_mux_001:src_valid -> burst_adapter_001:sink0_valid
	wire          cmd_xbar_mux_001_src_startofpacket;                                                                               // cmd_xbar_mux_001:src_startofpacket -> burst_adapter_001:sink0_startofpacket
	wire  [115:0] cmd_xbar_mux_001_src_data;                                                                                        // cmd_xbar_mux_001:src_data -> burst_adapter_001:sink0_data
	wire    [2:0] cmd_xbar_mux_001_src_channel;                                                                                     // cmd_xbar_mux_001:src_channel -> burst_adapter_001:sink0_channel
	wire          cmd_xbar_mux_001_src_ready;                                                                                       // burst_adapter_001:sink0_ready -> cmd_xbar_mux_001:src_ready
	wire          burst_adapter_001_source0_endofpacket;                                                                            // burst_adapter_001:source0_endofpacket -> modular_sgdma_dispatcher_0_CSR_translator_avalon_universal_slave_0_agent:cp_endofpacket
	wire          burst_adapter_001_source0_valid;                                                                                  // burst_adapter_001:source0_valid -> modular_sgdma_dispatcher_0_CSR_translator_avalon_universal_slave_0_agent:cp_valid
	wire          burst_adapter_001_source0_startofpacket;                                                                          // burst_adapter_001:source0_startofpacket -> modular_sgdma_dispatcher_0_CSR_translator_avalon_universal_slave_0_agent:cp_startofpacket
	wire  [115:0] burst_adapter_001_source0_data;                                                                                   // burst_adapter_001:source0_data -> modular_sgdma_dispatcher_0_CSR_translator_avalon_universal_slave_0_agent:cp_data
	wire          burst_adapter_001_source0_ready;                                                                                  // modular_sgdma_dispatcher_0_CSR_translator_avalon_universal_slave_0_agent:cp_ready -> burst_adapter_001:source0_ready
	wire    [2:0] burst_adapter_001_source0_channel;                                                                                // burst_adapter_001:source0_channel -> modular_sgdma_dispatcher_0_CSR_translator_avalon_universal_slave_0_agent:cp_channel
	wire          burst_adapter_002_source0_endofpacket;                                                                            // burst_adapter_002:source0_endofpacket -> modular_sgdma_dispatcher_0_Descriptor_Slave_translator_avalon_universal_slave_0_agent:cp_endofpacket
	wire          burst_adapter_002_source0_valid;                                                                                  // burst_adapter_002:source0_valid -> modular_sgdma_dispatcher_0_Descriptor_Slave_translator_avalon_universal_slave_0_agent:cp_valid
	wire          burst_adapter_002_source0_startofpacket;                                                                          // burst_adapter_002:source0_startofpacket -> modular_sgdma_dispatcher_0_Descriptor_Slave_translator_avalon_universal_slave_0_agent:cp_startofpacket
	wire  [223:0] burst_adapter_002_source0_data;                                                                                   // burst_adapter_002:source0_data -> modular_sgdma_dispatcher_0_Descriptor_Slave_translator_avalon_universal_slave_0_agent:cp_data
	wire          burst_adapter_002_source0_ready;                                                                                  // modular_sgdma_dispatcher_0_Descriptor_Slave_translator_avalon_universal_slave_0_agent:cp_ready -> burst_adapter_002:source0_ready
	wire    [2:0] burst_adapter_002_source0_channel;                                                                                // burst_adapter_002:source0_channel -> modular_sgdma_dispatcher_0_Descriptor_Slave_translator_avalon_universal_slave_0_agent:cp_channel
	wire          cmd_xbar_demux_src0_endofpacket;                                                                                  // cmd_xbar_demux:src0_endofpacket -> cmd_xbar_mux:sink0_endofpacket
	wire          cmd_xbar_demux_src0_valid;                                                                                        // cmd_xbar_demux:src0_valid -> cmd_xbar_mux:sink0_valid
	wire          cmd_xbar_demux_src0_startofpacket;                                                                                // cmd_xbar_demux:src0_startofpacket -> cmd_xbar_mux:sink0_startofpacket
	wire  [115:0] cmd_xbar_demux_src0_data;                                                                                         // cmd_xbar_demux:src0_data -> cmd_xbar_mux:sink0_data
	wire    [2:0] cmd_xbar_demux_src0_channel;                                                                                      // cmd_xbar_demux:src0_channel -> cmd_xbar_mux:sink0_channel
	wire          cmd_xbar_demux_src0_ready;                                                                                        // cmd_xbar_mux:sink0_ready -> cmd_xbar_demux:src0_ready
	wire          cmd_xbar_demux_src1_endofpacket;                                                                                  // cmd_xbar_demux:src1_endofpacket -> cmd_xbar_mux_001:sink0_endofpacket
	wire          cmd_xbar_demux_src1_valid;                                                                                        // cmd_xbar_demux:src1_valid -> cmd_xbar_mux_001:sink0_valid
	wire          cmd_xbar_demux_src1_startofpacket;                                                                                // cmd_xbar_demux:src1_startofpacket -> cmd_xbar_mux_001:sink0_startofpacket
	wire  [115:0] cmd_xbar_demux_src1_data;                                                                                         // cmd_xbar_demux:src1_data -> cmd_xbar_mux_001:sink0_data
	wire    [2:0] cmd_xbar_demux_src1_channel;                                                                                      // cmd_xbar_demux:src1_channel -> cmd_xbar_mux_001:sink0_channel
	wire          cmd_xbar_demux_src1_ready;                                                                                        // cmd_xbar_mux_001:sink0_ready -> cmd_xbar_demux:src1_ready
	wire          cmd_xbar_demux_src2_endofpacket;                                                                                  // cmd_xbar_demux:src2_endofpacket -> cmd_xbar_mux_002:sink0_endofpacket
	wire          cmd_xbar_demux_src2_valid;                                                                                        // cmd_xbar_demux:src2_valid -> cmd_xbar_mux_002:sink0_valid
	wire          cmd_xbar_demux_src2_startofpacket;                                                                                // cmd_xbar_demux:src2_startofpacket -> cmd_xbar_mux_002:sink0_startofpacket
	wire  [115:0] cmd_xbar_demux_src2_data;                                                                                         // cmd_xbar_demux:src2_data -> cmd_xbar_mux_002:sink0_data
	wire    [2:0] cmd_xbar_demux_src2_channel;                                                                                      // cmd_xbar_demux:src2_channel -> cmd_xbar_mux_002:sink0_channel
	wire          cmd_xbar_demux_src2_ready;                                                                                        // cmd_xbar_mux_002:sink0_ready -> cmd_xbar_demux:src2_ready
	wire          cmd_xbar_demux_001_src0_endofpacket;                                                                              // cmd_xbar_demux_001:src0_endofpacket -> cmd_xbar_mux:sink1_endofpacket
	wire          cmd_xbar_demux_001_src0_valid;                                                                                    // cmd_xbar_demux_001:src0_valid -> cmd_xbar_mux:sink1_valid
	wire          cmd_xbar_demux_001_src0_startofpacket;                                                                            // cmd_xbar_demux_001:src0_startofpacket -> cmd_xbar_mux:sink1_startofpacket
	wire  [115:0] cmd_xbar_demux_001_src0_data;                                                                                     // cmd_xbar_demux_001:src0_data -> cmd_xbar_mux:sink1_data
	wire    [2:0] cmd_xbar_demux_001_src0_channel;                                                                                  // cmd_xbar_demux_001:src0_channel -> cmd_xbar_mux:sink1_channel
	wire          cmd_xbar_demux_001_src0_ready;                                                                                    // cmd_xbar_mux:sink1_ready -> cmd_xbar_demux_001:src0_ready
	wire          cmd_xbar_demux_001_src1_endofpacket;                                                                              // cmd_xbar_demux_001:src1_endofpacket -> cmd_xbar_mux_001:sink1_endofpacket
	wire          cmd_xbar_demux_001_src1_valid;                                                                                    // cmd_xbar_demux_001:src1_valid -> cmd_xbar_mux_001:sink1_valid
	wire          cmd_xbar_demux_001_src1_startofpacket;                                                                            // cmd_xbar_demux_001:src1_startofpacket -> cmd_xbar_mux_001:sink1_startofpacket
	wire  [115:0] cmd_xbar_demux_001_src1_data;                                                                                     // cmd_xbar_demux_001:src1_data -> cmd_xbar_mux_001:sink1_data
	wire    [2:0] cmd_xbar_demux_001_src1_channel;                                                                                  // cmd_xbar_demux_001:src1_channel -> cmd_xbar_mux_001:sink1_channel
	wire          cmd_xbar_demux_001_src1_ready;                                                                                    // cmd_xbar_mux_001:sink1_ready -> cmd_xbar_demux_001:src1_ready
	wire          cmd_xbar_demux_001_src2_endofpacket;                                                                              // cmd_xbar_demux_001:src2_endofpacket -> cmd_xbar_mux_002:sink1_endofpacket
	wire          cmd_xbar_demux_001_src2_valid;                                                                                    // cmd_xbar_demux_001:src2_valid -> cmd_xbar_mux_002:sink1_valid
	wire          cmd_xbar_demux_001_src2_startofpacket;                                                                            // cmd_xbar_demux_001:src2_startofpacket -> cmd_xbar_mux_002:sink1_startofpacket
	wire  [115:0] cmd_xbar_demux_001_src2_data;                                                                                     // cmd_xbar_demux_001:src2_data -> cmd_xbar_mux_002:sink1_data
	wire    [2:0] cmd_xbar_demux_001_src2_channel;                                                                                  // cmd_xbar_demux_001:src2_channel -> cmd_xbar_mux_002:sink1_channel
	wire          cmd_xbar_demux_001_src2_ready;                                                                                    // cmd_xbar_mux_002:sink1_ready -> cmd_xbar_demux_001:src2_ready
	wire          rsp_xbar_demux_src0_endofpacket;                                                                                  // rsp_xbar_demux:src0_endofpacket -> rsp_xbar_mux:sink0_endofpacket
	wire          rsp_xbar_demux_src0_valid;                                                                                        // rsp_xbar_demux:src0_valid -> rsp_xbar_mux:sink0_valid
	wire          rsp_xbar_demux_src0_startofpacket;                                                                                // rsp_xbar_demux:src0_startofpacket -> rsp_xbar_mux:sink0_startofpacket
	wire  [115:0] rsp_xbar_demux_src0_data;                                                                                         // rsp_xbar_demux:src0_data -> rsp_xbar_mux:sink0_data
	wire    [2:0] rsp_xbar_demux_src0_channel;                                                                                      // rsp_xbar_demux:src0_channel -> rsp_xbar_mux:sink0_channel
	wire          rsp_xbar_demux_src0_ready;                                                                                        // rsp_xbar_mux:sink0_ready -> rsp_xbar_demux:src0_ready
	wire          rsp_xbar_demux_src1_endofpacket;                                                                                  // rsp_xbar_demux:src1_endofpacket -> rsp_xbar_mux_001:sink0_endofpacket
	wire          rsp_xbar_demux_src1_valid;                                                                                        // rsp_xbar_demux:src1_valid -> rsp_xbar_mux_001:sink0_valid
	wire          rsp_xbar_demux_src1_startofpacket;                                                                                // rsp_xbar_demux:src1_startofpacket -> rsp_xbar_mux_001:sink0_startofpacket
	wire  [115:0] rsp_xbar_demux_src1_data;                                                                                         // rsp_xbar_demux:src1_data -> rsp_xbar_mux_001:sink0_data
	wire    [2:0] rsp_xbar_demux_src1_channel;                                                                                      // rsp_xbar_demux:src1_channel -> rsp_xbar_mux_001:sink0_channel
	wire          rsp_xbar_demux_src1_ready;                                                                                        // rsp_xbar_mux_001:sink0_ready -> rsp_xbar_demux:src1_ready
	wire          rsp_xbar_demux_001_src0_endofpacket;                                                                              // rsp_xbar_demux_001:src0_endofpacket -> rsp_xbar_mux:sink1_endofpacket
	wire          rsp_xbar_demux_001_src0_valid;                                                                                    // rsp_xbar_demux_001:src0_valid -> rsp_xbar_mux:sink1_valid
	wire          rsp_xbar_demux_001_src0_startofpacket;                                                                            // rsp_xbar_demux_001:src0_startofpacket -> rsp_xbar_mux:sink1_startofpacket
	wire  [115:0] rsp_xbar_demux_001_src0_data;                                                                                     // rsp_xbar_demux_001:src0_data -> rsp_xbar_mux:sink1_data
	wire    [2:0] rsp_xbar_demux_001_src0_channel;                                                                                  // rsp_xbar_demux_001:src0_channel -> rsp_xbar_mux:sink1_channel
	wire          rsp_xbar_demux_001_src0_ready;                                                                                    // rsp_xbar_mux:sink1_ready -> rsp_xbar_demux_001:src0_ready
	wire          rsp_xbar_demux_001_src1_endofpacket;                                                                              // rsp_xbar_demux_001:src1_endofpacket -> rsp_xbar_mux_001:sink1_endofpacket
	wire          rsp_xbar_demux_001_src1_valid;                                                                                    // rsp_xbar_demux_001:src1_valid -> rsp_xbar_mux_001:sink1_valid
	wire          rsp_xbar_demux_001_src1_startofpacket;                                                                            // rsp_xbar_demux_001:src1_startofpacket -> rsp_xbar_mux_001:sink1_startofpacket
	wire  [115:0] rsp_xbar_demux_001_src1_data;                                                                                     // rsp_xbar_demux_001:src1_data -> rsp_xbar_mux_001:sink1_data
	wire    [2:0] rsp_xbar_demux_001_src1_channel;                                                                                  // rsp_xbar_demux_001:src1_channel -> rsp_xbar_mux_001:sink1_channel
	wire          rsp_xbar_demux_001_src1_ready;                                                                                    // rsp_xbar_mux_001:sink1_ready -> rsp_xbar_demux_001:src1_ready
	wire          rsp_xbar_demux_002_src0_endofpacket;                                                                              // rsp_xbar_demux_002:src0_endofpacket -> rsp_xbar_mux:sink2_endofpacket
	wire          rsp_xbar_demux_002_src0_valid;                                                                                    // rsp_xbar_demux_002:src0_valid -> rsp_xbar_mux:sink2_valid
	wire          rsp_xbar_demux_002_src0_startofpacket;                                                                            // rsp_xbar_demux_002:src0_startofpacket -> rsp_xbar_mux:sink2_startofpacket
	wire  [115:0] rsp_xbar_demux_002_src0_data;                                                                                     // rsp_xbar_demux_002:src0_data -> rsp_xbar_mux:sink2_data
	wire    [2:0] rsp_xbar_demux_002_src0_channel;                                                                                  // rsp_xbar_demux_002:src0_channel -> rsp_xbar_mux:sink2_channel
	wire          rsp_xbar_demux_002_src0_ready;                                                                                    // rsp_xbar_mux:sink2_ready -> rsp_xbar_demux_002:src0_ready
	wire          rsp_xbar_demux_002_src1_endofpacket;                                                                              // rsp_xbar_demux_002:src1_endofpacket -> rsp_xbar_mux_001:sink2_endofpacket
	wire          rsp_xbar_demux_002_src1_valid;                                                                                    // rsp_xbar_demux_002:src1_valid -> rsp_xbar_mux_001:sink2_valid
	wire          rsp_xbar_demux_002_src1_startofpacket;                                                                            // rsp_xbar_demux_002:src1_startofpacket -> rsp_xbar_mux_001:sink2_startofpacket
	wire  [115:0] rsp_xbar_demux_002_src1_data;                                                                                     // rsp_xbar_demux_002:src1_data -> rsp_xbar_mux_001:sink2_data
	wire    [2:0] rsp_xbar_demux_002_src1_channel;                                                                                  // rsp_xbar_demux_002:src1_channel -> rsp_xbar_mux_001:sink2_channel
	wire          rsp_xbar_demux_002_src1_ready;                                                                                    // rsp_xbar_mux_001:sink2_ready -> rsp_xbar_demux_002:src1_ready
	wire          id_router_002_src_endofpacket;                                                                                    // id_router_002:src_endofpacket -> width_adapter:in_endofpacket
	wire          id_router_002_src_valid;                                                                                          // id_router_002:src_valid -> width_adapter:in_valid
	wire          id_router_002_src_startofpacket;                                                                                  // id_router_002:src_startofpacket -> width_adapter:in_startofpacket
	wire  [223:0] id_router_002_src_data;                                                                                           // id_router_002:src_data -> width_adapter:in_data
	wire    [2:0] id_router_002_src_channel;                                                                                        // id_router_002:src_channel -> width_adapter:in_channel
	wire          id_router_002_src_ready;                                                                                          // width_adapter:in_ready -> id_router_002:src_ready
	wire          width_adapter_src_endofpacket;                                                                                    // width_adapter:out_endofpacket -> rsp_xbar_demux_002:sink_endofpacket
	wire          width_adapter_src_valid;                                                                                          // width_adapter:out_valid -> rsp_xbar_demux_002:sink_valid
	wire          width_adapter_src_startofpacket;                                                                                  // width_adapter:out_startofpacket -> rsp_xbar_demux_002:sink_startofpacket
	wire  [115:0] width_adapter_src_data;                                                                                           // width_adapter:out_data -> rsp_xbar_demux_002:sink_data
	wire          width_adapter_src_ready;                                                                                          // rsp_xbar_demux_002:sink_ready -> width_adapter:out_ready
	wire    [2:0] width_adapter_src_channel;                                                                                        // width_adapter:out_channel -> rsp_xbar_demux_002:sink_channel
	wire          cmd_xbar_mux_002_src_endofpacket;                                                                                 // cmd_xbar_mux_002:src_endofpacket -> width_adapter_001:in_endofpacket
	wire          cmd_xbar_mux_002_src_valid;                                                                                       // cmd_xbar_mux_002:src_valid -> width_adapter_001:in_valid
	wire          cmd_xbar_mux_002_src_startofpacket;                                                                               // cmd_xbar_mux_002:src_startofpacket -> width_adapter_001:in_startofpacket
	wire  [115:0] cmd_xbar_mux_002_src_data;                                                                                        // cmd_xbar_mux_002:src_data -> width_adapter_001:in_data
	wire    [2:0] cmd_xbar_mux_002_src_channel;                                                                                     // cmd_xbar_mux_002:src_channel -> width_adapter_001:in_channel
	wire          cmd_xbar_mux_002_src_ready;                                                                                       // width_adapter_001:in_ready -> cmd_xbar_mux_002:src_ready
	wire          width_adapter_001_src_endofpacket;                                                                                // width_adapter_001:out_endofpacket -> burst_adapter_002:sink0_endofpacket
	wire          width_adapter_001_src_valid;                                                                                      // width_adapter_001:out_valid -> burst_adapter_002:sink0_valid
	wire          width_adapter_001_src_startofpacket;                                                                              // width_adapter_001:out_startofpacket -> burst_adapter_002:sink0_startofpacket
	wire  [223:0] width_adapter_001_src_data;                                                                                       // width_adapter_001:out_data -> burst_adapter_002:sink0_data
	wire          width_adapter_001_src_ready;                                                                                      // burst_adapter_002:sink0_ready -> width_adapter_001:out_ready
	wire    [2:0] width_adapter_001_src_channel;                                                                                    // width_adapter_001:out_channel -> burst_adapter_002:sink0_channel
	wire    [2:0] limiter_cmd_valid_data;                                                                                           // limiter:cmd_src_valid -> cmd_xbar_demux:sink_valid
	wire    [2:0] limiter_001_cmd_valid_data;                                                                                       // limiter_001:cmd_src_valid -> cmd_xbar_demux_001:sink_valid

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (21),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) sysid_qsys_control_slave_translator (
		.clk                      (hps_0_h2f_user0_clock_clk),                                                           //                      clk.clk
		.reset                    (sysid_qsys_reset_reset_bridge_in_reset_reset),                                        //                    reset.reset
		.uav_address              (sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount           (sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent_m0_burstcount),    //                         .burstcount
		.uav_read                 (sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent_m0_read),          //                         .read
		.uav_write                (sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent_m0_write),         //                         .write
		.uav_waitrequest          (sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid        (sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable           (sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata             (sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent_m0_readdata),      //                         .readdata
		.uav_writedata            (sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent_m0_writedata),     //                         .writedata
		.uav_lock                 (sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent_m0_lock),          //                         .lock
		.uav_debugaccess          (sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent_m0_debugaccess),   //                         .debugaccess
		.av_address               (sysid_qsys_control_slave_address),                                                    //      avalon_anti_slave_0.address
		.av_readdata              (sysid_qsys_control_slave_readdata),                                                   //                         .readdata
		.av_write                 (),                                                                                    //              (terminated)
		.av_read                  (),                                                                                    //              (terminated)
		.av_writedata             (),                                                                                    //              (terminated)
		.av_begintransfer         (),                                                                                    //              (terminated)
		.av_beginbursttransfer    (),                                                                                    //              (terminated)
		.av_burstcount            (),                                                                                    //              (terminated)
		.av_byteenable            (),                                                                                    //              (terminated)
		.av_readdatavalid         (1'b0),                                                                                //              (terminated)
		.av_waitrequest           (1'b0),                                                                                //              (terminated)
		.av_writebyteenable       (),                                                                                    //              (terminated)
		.av_lock                  (),                                                                                    //              (terminated)
		.av_chipselect            (),                                                                                    //              (terminated)
		.av_clken                 (),                                                                                    //              (terminated)
		.uav_clken                (1'b0),                                                                                //              (terminated)
		.av_debugaccess           (),                                                                                    //              (terminated)
		.av_outputenable          (),                                                                                    //              (terminated)
		.uav_response             (),                                                                                    //              (terminated)
		.av_response              (2'b00),                                                                               //              (terminated)
		.uav_writeresponserequest (1'b0),                                                                                //              (terminated)
		.uav_writeresponsevalid   (),                                                                                    //              (terminated)
		.av_writeresponserequest  (),                                                                                    //              (terminated)
		.av_writeresponsevalid    (1'b0)                                                                                 //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (21),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) modular_sgdma_dispatcher_0_csr_translator (
		.clk                      (hps_0_h2f_user0_clock_clk),                                                                 //                      clk.clk
		.reset                    (sysid_qsys_reset_reset_bridge_in_reset_reset),                                              //                    reset.reset
		.uav_address              (modular_sgdma_dispatcher_0_csr_translator_avalon_universal_slave_0_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount           (modular_sgdma_dispatcher_0_csr_translator_avalon_universal_slave_0_agent_m0_burstcount),    //                         .burstcount
		.uav_read                 (modular_sgdma_dispatcher_0_csr_translator_avalon_universal_slave_0_agent_m0_read),          //                         .read
		.uav_write                (modular_sgdma_dispatcher_0_csr_translator_avalon_universal_slave_0_agent_m0_write),         //                         .write
		.uav_waitrequest          (modular_sgdma_dispatcher_0_csr_translator_avalon_universal_slave_0_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid        (modular_sgdma_dispatcher_0_csr_translator_avalon_universal_slave_0_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable           (modular_sgdma_dispatcher_0_csr_translator_avalon_universal_slave_0_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata             (modular_sgdma_dispatcher_0_csr_translator_avalon_universal_slave_0_agent_m0_readdata),      //                         .readdata
		.uav_writedata            (modular_sgdma_dispatcher_0_csr_translator_avalon_universal_slave_0_agent_m0_writedata),     //                         .writedata
		.uav_lock                 (modular_sgdma_dispatcher_0_csr_translator_avalon_universal_slave_0_agent_m0_lock),          //                         .lock
		.uav_debugaccess          (modular_sgdma_dispatcher_0_csr_translator_avalon_universal_slave_0_agent_m0_debugaccess),   //                         .debugaccess
		.av_address               (modular_sgdma_dispatcher_0_CSR_address),                                                    //      avalon_anti_slave_0.address
		.av_write                 (modular_sgdma_dispatcher_0_CSR_write),                                                      //                         .write
		.av_read                  (modular_sgdma_dispatcher_0_CSR_read),                                                       //                         .read
		.av_readdata              (modular_sgdma_dispatcher_0_CSR_readdata),                                                   //                         .readdata
		.av_writedata             (modular_sgdma_dispatcher_0_CSR_writedata),                                                  //                         .writedata
		.av_byteenable            (modular_sgdma_dispatcher_0_CSR_byteenable),                                                 //                         .byteenable
		.av_begintransfer         (),                                                                                          //              (terminated)
		.av_beginbursttransfer    (),                                                                                          //              (terminated)
		.av_burstcount            (),                                                                                          //              (terminated)
		.av_readdatavalid         (1'b0),                                                                                      //              (terminated)
		.av_waitrequest           (1'b0),                                                                                      //              (terminated)
		.av_writebyteenable       (),                                                                                          //              (terminated)
		.av_lock                  (),                                                                                          //              (terminated)
		.av_chipselect            (),                                                                                          //              (terminated)
		.av_clken                 (),                                                                                          //              (terminated)
		.uav_clken                (1'b0),                                                                                      //              (terminated)
		.av_debugaccess           (),                                                                                          //              (terminated)
		.av_outputenable          (),                                                                                          //              (terminated)
		.uav_response             (),                                                                                          //              (terminated)
		.av_response              (2'b00),                                                                                     //              (terminated)
		.uav_writeresponserequest (1'b0),                                                                                      //              (terminated)
		.uav_writeresponsevalid   (),                                                                                          //              (terminated)
		.av_writeresponserequest  (),                                                                                          //              (terminated)
		.av_writeresponsevalid    (1'b0)                                                                                       //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (128),
		.UAV_DATA_W                     (128),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (16),
		.UAV_BYTEENABLE_W               (16),
		.UAV_ADDRESS_W                  (21),
		.UAV_BURSTCOUNT_W               (5),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (16),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) modular_sgdma_dispatcher_0_descriptor_slave_translator (
		.clk                      (hps_0_h2f_user0_clock_clk),                                                                                                             //                      clk.clk
		.reset                    (sysid_qsys_reset_reset_bridge_in_reset_reset),                                                                                          //                    reset.reset
		.uav_address              (modular_sgdma_dispatcher_0_descriptor_slave_translator_avalon_universal_slave_0_agent_m0_address),                                      // avalon_universal_slave_0.address
		.uav_burstcount           (modular_sgdma_dispatcher_0_descriptor_slave_translator_avalon_universal_slave_0_agent_m0_burstcount),                                   //                         .burstcount
		.uav_read                 (modular_sgdma_dispatcher_0_descriptor_slave_translator_avalon_universal_slave_0_agent_m0_read),                                         //                         .read
		.uav_write                (modular_sgdma_dispatcher_0_descriptor_slave_translator_avalon_universal_slave_0_agent_m0_write),                                        //                         .write
		.uav_waitrequest          (modular_sgdma_dispatcher_0_descriptor_slave_translator_avalon_universal_slave_0_agent_m0_waitrequest),                                  //                         .waitrequest
		.uav_readdatavalid        (modular_sgdma_dispatcher_0_descriptor_slave_translator_avalon_universal_slave_0_agent_m0_readdatavalid),                                //                         .readdatavalid
		.uav_byteenable           (modular_sgdma_dispatcher_0_descriptor_slave_translator_avalon_universal_slave_0_agent_m0_byteenable),                                   //                         .byteenable
		.uav_readdata             (modular_sgdma_dispatcher_0_descriptor_slave_translator_avalon_universal_slave_0_agent_m0_readdata),                                     //                         .readdata
		.uav_writedata            (modular_sgdma_dispatcher_0_descriptor_slave_translator_avalon_universal_slave_0_agent_m0_writedata),                                    //                         .writedata
		.uav_lock                 (modular_sgdma_dispatcher_0_descriptor_slave_translator_avalon_universal_slave_0_agent_m0_lock),                                         //                         .lock
		.uav_debugaccess          (modular_sgdma_dispatcher_0_descriptor_slave_translator_avalon_universal_slave_0_agent_m0_debugaccess),                                  //                         .debugaccess
		.av_write                 (modular_sgdma_dispatcher_0_Descriptor_Slave_write),                                                                                     //      avalon_anti_slave_0.write
		.av_writedata             (modular_sgdma_dispatcher_0_Descriptor_Slave_writedata),                                                                                 //                         .writedata
		.av_byteenable            (modular_sgdma_dispatcher_0_Descriptor_Slave_byteenable),                                                                                //                         .byteenable
		.av_waitrequest           (modular_sgdma_dispatcher_0_Descriptor_Slave_waitrequest),                                                                               //                         .waitrequest
		.av_address               (),                                                                                                                                      //              (terminated)
		.av_read                  (),                                                                                                                                      //              (terminated)
		.av_readdata              (128'b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011011110101011011101111010101101), //              (terminated)
		.av_begintransfer         (),                                                                                                                                      //              (terminated)
		.av_beginbursttransfer    (),                                                                                                                                      //              (terminated)
		.av_burstcount            (),                                                                                                                                      //              (terminated)
		.av_readdatavalid         (1'b0),                                                                                                                                  //              (terminated)
		.av_writebyteenable       (),                                                                                                                                      //              (terminated)
		.av_lock                  (),                                                                                                                                      //              (terminated)
		.av_chipselect            (),                                                                                                                                      //              (terminated)
		.av_clken                 (),                                                                                                                                      //              (terminated)
		.uav_clken                (1'b0),                                                                                                                                  //              (terminated)
		.av_debugaccess           (),                                                                                                                                      //              (terminated)
		.av_outputenable          (),                                                                                                                                      //              (terminated)
		.uav_response             (),                                                                                                                                      //              (terminated)
		.av_response              (2'b00),                                                                                                                                 //              (terminated)
		.uav_writeresponserequest (1'b0),                                                                                                                                  //              (terminated)
		.uav_writeresponsevalid   (),                                                                                                                                      //              (terminated)
		.av_writeresponserequest  (),                                                                                                                                      //              (terminated)
		.av_writeresponsevalid    (1'b0)                                                                                                                                   //              (terminated)
	);

	altera_merlin_axi_master_ni #(
		.ID_WIDTH                  (12),
		.ADDR_WIDTH                (21),
		.RDATA_WIDTH               (32),
		.WDATA_WIDTH               (32),
		.ADDR_USER_WIDTH           (1),
		.DATA_USER_WIDTH           (1),
		.AXI_BURST_LENGTH_WIDTH    (4),
		.AXI_LOCK_WIDTH            (2),
		.AXI_VERSION               ("AXI3"),
		.WRITE_ISSUING_CAPABILITY  (8),
		.READ_ISSUING_CAPABILITY   (8),
		.PKT_BEGIN_BURST           (86),
		.PKT_CACHE_H               (110),
		.PKT_CACHE_L               (107),
		.PKT_ADDR_SIDEBAND_H       (84),
		.PKT_ADDR_SIDEBAND_L       (84),
		.PKT_PROTECTION_H          (106),
		.PKT_PROTECTION_L          (104),
		.PKT_BURST_SIZE_H          (81),
		.PKT_BURST_SIZE_L          (79),
		.PKT_BURST_TYPE_H          (83),
		.PKT_BURST_TYPE_L          (82),
		.PKT_RESPONSE_STATUS_L     (111),
		.PKT_RESPONSE_STATUS_H     (112),
		.PKT_BURSTWRAP_H           (78),
		.PKT_BURSTWRAP_L           (72),
		.PKT_BYTE_CNT_H            (71),
		.PKT_BYTE_CNT_L            (63),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_EXCLUSIVE       (62),
		.PKT_TRANS_LOCK            (61),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (88),
		.PKT_DEST_ID_H             (91),
		.PKT_DEST_ID_L             (90),
		.PKT_THREAD_ID_H           (103),
		.PKT_THREAD_ID_L           (92),
		.PKT_QOS_L                 (87),
		.PKT_QOS_H                 (87),
		.PKT_ORI_BURST_SIZE_L      (113),
		.PKT_ORI_BURST_SIZE_H      (115),
		.PKT_DATA_SIDEBAND_H       (85),
		.PKT_DATA_SIDEBAND_L       (85),
		.ST_DATA_W                 (116),
		.ST_CHANNEL_W              (3),
		.ID                        (0)
	) hps_0_h2f_lw_axi_master_agent (
		.aclk                   (hps_0_h2f_user0_clock_clk),                            //              clk.clk
		.aresetn                (~sysid_qsys_reset_reset_bridge_in_reset_reset),        //        clk_reset.reset_n
		.write_cp_valid         (hps_0_h2f_lw_axi_master_agent_write_cp_valid),         //         write_cp.valid
		.write_cp_data          (hps_0_h2f_lw_axi_master_agent_write_cp_data),          //                 .data
		.write_cp_startofpacket (hps_0_h2f_lw_axi_master_agent_write_cp_startofpacket), //                 .startofpacket
		.write_cp_endofpacket   (hps_0_h2f_lw_axi_master_agent_write_cp_endofpacket),   //                 .endofpacket
		.write_cp_ready         (hps_0_h2f_lw_axi_master_agent_write_cp_ready),         //                 .ready
		.write_rp_valid         (limiter_rsp_src_valid),                                //         write_rp.valid
		.write_rp_data          (limiter_rsp_src_data),                                 //                 .data
		.write_rp_channel       (limiter_rsp_src_channel),                              //                 .channel
		.write_rp_startofpacket (limiter_rsp_src_startofpacket),                        //                 .startofpacket
		.write_rp_endofpacket   (limiter_rsp_src_endofpacket),                          //                 .endofpacket
		.write_rp_ready         (limiter_rsp_src_ready),                                //                 .ready
		.read_cp_valid          (hps_0_h2f_lw_axi_master_agent_read_cp_valid),          //          read_cp.valid
		.read_cp_data           (hps_0_h2f_lw_axi_master_agent_read_cp_data),           //                 .data
		.read_cp_startofpacket  (hps_0_h2f_lw_axi_master_agent_read_cp_startofpacket),  //                 .startofpacket
		.read_cp_endofpacket    (hps_0_h2f_lw_axi_master_agent_read_cp_endofpacket),    //                 .endofpacket
		.read_cp_ready          (hps_0_h2f_lw_axi_master_agent_read_cp_ready),          //                 .ready
		.read_rp_valid          (limiter_001_rsp_src_valid),                            //          read_rp.valid
		.read_rp_data           (limiter_001_rsp_src_data),                             //                 .data
		.read_rp_channel        (limiter_001_rsp_src_channel),                          //                 .channel
		.read_rp_startofpacket  (limiter_001_rsp_src_startofpacket),                    //                 .startofpacket
		.read_rp_endofpacket    (limiter_001_rsp_src_endofpacket),                      //                 .endofpacket
		.read_rp_ready          (limiter_001_rsp_src_ready),                            //                 .ready
		.awid                   (hps_0_h2f_lw_axi_master_awid),                         // altera_axi_slave.awid
		.awaddr                 (hps_0_h2f_lw_axi_master_awaddr),                       //                 .awaddr
		.awlen                  (hps_0_h2f_lw_axi_master_awlen),                        //                 .awlen
		.awsize                 (hps_0_h2f_lw_axi_master_awsize),                       //                 .awsize
		.awburst                (hps_0_h2f_lw_axi_master_awburst),                      //                 .awburst
		.awlock                 (hps_0_h2f_lw_axi_master_awlock),                       //                 .awlock
		.awcache                (hps_0_h2f_lw_axi_master_awcache),                      //                 .awcache
		.awprot                 (hps_0_h2f_lw_axi_master_awprot),                       //                 .awprot
		.awvalid                (hps_0_h2f_lw_axi_master_awvalid),                      //                 .awvalid
		.awready                (hps_0_h2f_lw_axi_master_awready),                      //                 .awready
		.wid                    (hps_0_h2f_lw_axi_master_wid),                          //                 .wid
		.wdata                  (hps_0_h2f_lw_axi_master_wdata),                        //                 .wdata
		.wstrb                  (hps_0_h2f_lw_axi_master_wstrb),                        //                 .wstrb
		.wlast                  (hps_0_h2f_lw_axi_master_wlast),                        //                 .wlast
		.wvalid                 (hps_0_h2f_lw_axi_master_wvalid),                       //                 .wvalid
		.wready                 (hps_0_h2f_lw_axi_master_wready),                       //                 .wready
		.bid                    (hps_0_h2f_lw_axi_master_bid),                          //                 .bid
		.bresp                  (hps_0_h2f_lw_axi_master_bresp),                        //                 .bresp
		.bvalid                 (hps_0_h2f_lw_axi_master_bvalid),                       //                 .bvalid
		.bready                 (hps_0_h2f_lw_axi_master_bready),                       //                 .bready
		.arid                   (hps_0_h2f_lw_axi_master_arid),                         //                 .arid
		.araddr                 (hps_0_h2f_lw_axi_master_araddr),                       //                 .araddr
		.arlen                  (hps_0_h2f_lw_axi_master_arlen),                        //                 .arlen
		.arsize                 (hps_0_h2f_lw_axi_master_arsize),                       //                 .arsize
		.arburst                (hps_0_h2f_lw_axi_master_arburst),                      //                 .arburst
		.arlock                 (hps_0_h2f_lw_axi_master_arlock),                       //                 .arlock
		.arcache                (hps_0_h2f_lw_axi_master_arcache),                      //                 .arcache
		.arprot                 (hps_0_h2f_lw_axi_master_arprot),                       //                 .arprot
		.arvalid                (hps_0_h2f_lw_axi_master_arvalid),                      //                 .arvalid
		.arready                (hps_0_h2f_lw_axi_master_arready),                      //                 .arready
		.rid                    (hps_0_h2f_lw_axi_master_rid),                          //                 .rid
		.rdata                  (hps_0_h2f_lw_axi_master_rdata),                        //                 .rdata
		.rresp                  (hps_0_h2f_lw_axi_master_rresp),                        //                 .rresp
		.rlast                  (hps_0_h2f_lw_axi_master_rlast),                        //                 .rlast
		.rvalid                 (hps_0_h2f_lw_axi_master_rvalid),                       //                 .rvalid
		.rready                 (hps_0_h2f_lw_axi_master_rready),                       //                 .rready
		.awuser                 (1'b0),                                                 //      (terminated)
		.aruser                 (1'b0),                                                 //      (terminated)
		.awqos                  (4'b0000),                                              //      (terminated)
		.arqos                  (4'b0000),                                              //      (terminated)
		.awregion               (4'b0000),                                              //      (terminated)
		.arregion               (4'b0000),                                              //      (terminated)
		.wuser                  (8'b00000000),                                          //      (terminated)
		.ruser                  (),                                                     //      (terminated)
		.buser                  ()                                                      //      (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (86),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_TRANS_LOCK            (61),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (88),
		.PKT_DEST_ID_H             (91),
		.PKT_DEST_ID_L             (90),
		.PKT_BURSTWRAP_H           (78),
		.PKT_BURSTWRAP_L           (72),
		.PKT_BYTE_CNT_H            (71),
		.PKT_BYTE_CNT_L            (63),
		.PKT_PROTECTION_H          (106),
		.PKT_PROTECTION_L          (104),
		.PKT_RESPONSE_STATUS_H     (112),
		.PKT_RESPONSE_STATUS_L     (111),
		.PKT_BURST_SIZE_H          (81),
		.PKT_BURST_SIZE_L          (79),
		.PKT_ORI_BURST_SIZE_L      (113),
		.PKT_ORI_BURST_SIZE_H      (115),
		.ST_CHANNEL_W              (3),
		.ST_DATA_W                 (116),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent (
		.clk                     (hps_0_h2f_user0_clock_clk),                                                                     //             clk.clk
		.reset                   (sysid_qsys_reset_reset_bridge_in_reset_reset),                                                  //       clk_reset.reset
		.m0_address              (sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent_m0_address),                 //              m0.address
		.m0_burstcount           (sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent_m0_lock),                    //                .lock
		.m0_readdata             (sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent_m0_read),                    //                .read
		.m0_waitrequest          (sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent_m0_writedata),               //                .writedata
		.m0_write                (sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent_m0_write),                   //                .write
		.rp_endofpacket          (sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent_rp_ready),                   //                .ready
		.rp_valid                (sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent_rp_valid),                   //                .valid
		.rp_data                 (sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent_rp_data),                    //                .data
		.rp_startofpacket        (sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (burst_adapter_source0_ready),                                                                   //              cp.ready
		.cp_valid                (burst_adapter_source0_valid),                                                                   //                .valid
		.cp_data                 (burst_adapter_source0_data),                                                                    //                .data
		.cp_startofpacket        (burst_adapter_source0_startofpacket),                                                           //                .startofpacket
		.cp_endofpacket          (burst_adapter_source0_endofpacket),                                                             //                .endofpacket
		.cp_channel              (burst_adapter_source0_channel),                                                                 //                .channel
		.rf_sink_ready           (sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent_rdata_fifo_out_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent_rdata_fifo_out_valid),       //                .valid
		.rdata_fifo_sink_data    (sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent_rdata_fifo_out_data),        //                .data
		.rdata_fifo_src_ready    (sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                                                         //     (terminated)
		.m0_writeresponserequest (),                                                                                              //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                                           //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (117),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent_rsp_fifo (
		.clk               (hps_0_h2f_user0_clock_clk),                                                                     //       clk.clk
		.reset             (sysid_qsys_reset_reset_bridge_in_reset_reset),                                                  // clk_reset.reset
		.in_data           (sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent_rf_source_data),             //        in.data
		.in_valid          (sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent_rf_source_valid),            //          .valid
		.in_ready          (sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                                                         // (terminated)
		.csr_read          (1'b0),                                                                                          // (terminated)
		.csr_write         (1'b0),                                                                                          // (terminated)
		.csr_readdata      (),                                                                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                                          // (terminated)
		.almost_full_data  (),                                                                                              // (terminated)
		.almost_empty_data (),                                                                                              // (terminated)
		.in_empty          (1'b0),                                                                                          // (terminated)
		.out_empty         (),                                                                                              // (terminated)
		.in_error          (1'b0),                                                                                          // (terminated)
		.out_error         (),                                                                                              // (terminated)
		.in_channel        (1'b0),                                                                                          // (terminated)
		.out_channel       ()                                                                                               // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent_rdata_fifo (
		.clk               (hps_0_h2f_user0_clock_clk),                                                               //       clk.clk
		.reset             (sysid_qsys_reset_reset_bridge_in_reset_reset),                                            // clk_reset.reset
		.in_data           (sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                                                   // (terminated)
		.csr_read          (1'b0),                                                                                    // (terminated)
		.csr_write         (1'b0),                                                                                    // (terminated)
		.csr_readdata      (),                                                                                        // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                                    // (terminated)
		.almost_full_data  (),                                                                                        // (terminated)
		.almost_empty_data (),                                                                                        // (terminated)
		.in_startofpacket  (1'b0),                                                                                    // (terminated)
		.in_endofpacket    (1'b0),                                                                                    // (terminated)
		.out_startofpacket (),                                                                                        // (terminated)
		.out_endofpacket   (),                                                                                        // (terminated)
		.in_empty          (1'b0),                                                                                    // (terminated)
		.out_empty         (),                                                                                        // (terminated)
		.in_error          (1'b0),                                                                                    // (terminated)
		.out_error         (),                                                                                        // (terminated)
		.in_channel        (1'b0),                                                                                    // (terminated)
		.out_channel       ()                                                                                         // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (86),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_TRANS_LOCK            (61),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (88),
		.PKT_DEST_ID_H             (91),
		.PKT_DEST_ID_L             (90),
		.PKT_BURSTWRAP_H           (78),
		.PKT_BURSTWRAP_L           (72),
		.PKT_BYTE_CNT_H            (71),
		.PKT_BYTE_CNT_L            (63),
		.PKT_PROTECTION_H          (106),
		.PKT_PROTECTION_L          (104),
		.PKT_RESPONSE_STATUS_H     (112),
		.PKT_RESPONSE_STATUS_L     (111),
		.PKT_BURST_SIZE_H          (81),
		.PKT_BURST_SIZE_L          (79),
		.PKT_ORI_BURST_SIZE_L      (113),
		.PKT_ORI_BURST_SIZE_H      (115),
		.ST_CHANNEL_W              (3),
		.ST_DATA_W                 (116),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) modular_sgdma_dispatcher_0_csr_translator_avalon_universal_slave_0_agent (
		.clk                     (hps_0_h2f_user0_clock_clk),                                                                           //             clk.clk
		.reset                   (sysid_qsys_reset_reset_bridge_in_reset_reset),                                                        //       clk_reset.reset
		.m0_address              (modular_sgdma_dispatcher_0_csr_translator_avalon_universal_slave_0_agent_m0_address),                 //              m0.address
		.m0_burstcount           (modular_sgdma_dispatcher_0_csr_translator_avalon_universal_slave_0_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (modular_sgdma_dispatcher_0_csr_translator_avalon_universal_slave_0_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (modular_sgdma_dispatcher_0_csr_translator_avalon_universal_slave_0_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (modular_sgdma_dispatcher_0_csr_translator_avalon_universal_slave_0_agent_m0_lock),                    //                .lock
		.m0_readdata             (modular_sgdma_dispatcher_0_csr_translator_avalon_universal_slave_0_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (modular_sgdma_dispatcher_0_csr_translator_avalon_universal_slave_0_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (modular_sgdma_dispatcher_0_csr_translator_avalon_universal_slave_0_agent_m0_read),                    //                .read
		.m0_waitrequest          (modular_sgdma_dispatcher_0_csr_translator_avalon_universal_slave_0_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (modular_sgdma_dispatcher_0_csr_translator_avalon_universal_slave_0_agent_m0_writedata),               //                .writedata
		.m0_write                (modular_sgdma_dispatcher_0_csr_translator_avalon_universal_slave_0_agent_m0_write),                   //                .write
		.rp_endofpacket          (modular_sgdma_dispatcher_0_csr_translator_avalon_universal_slave_0_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (modular_sgdma_dispatcher_0_csr_translator_avalon_universal_slave_0_agent_rp_ready),                   //                .ready
		.rp_valid                (modular_sgdma_dispatcher_0_csr_translator_avalon_universal_slave_0_agent_rp_valid),                   //                .valid
		.rp_data                 (modular_sgdma_dispatcher_0_csr_translator_avalon_universal_slave_0_agent_rp_data),                    //                .data
		.rp_startofpacket        (modular_sgdma_dispatcher_0_csr_translator_avalon_universal_slave_0_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (burst_adapter_001_source0_ready),                                                                     //              cp.ready
		.cp_valid                (burst_adapter_001_source0_valid),                                                                     //                .valid
		.cp_data                 (burst_adapter_001_source0_data),                                                                      //                .data
		.cp_startofpacket        (burst_adapter_001_source0_startofpacket),                                                             //                .startofpacket
		.cp_endofpacket          (burst_adapter_001_source0_endofpacket),                                                               //                .endofpacket
		.cp_channel              (burst_adapter_001_source0_channel),                                                                   //                .channel
		.rf_sink_ready           (modular_sgdma_dispatcher_0_csr_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (modular_sgdma_dispatcher_0_csr_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (modular_sgdma_dispatcher_0_csr_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (modular_sgdma_dispatcher_0_csr_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (modular_sgdma_dispatcher_0_csr_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (modular_sgdma_dispatcher_0_csr_translator_avalon_universal_slave_0_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (modular_sgdma_dispatcher_0_csr_translator_avalon_universal_slave_0_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (modular_sgdma_dispatcher_0_csr_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (modular_sgdma_dispatcher_0_csr_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (modular_sgdma_dispatcher_0_csr_translator_avalon_universal_slave_0_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (modular_sgdma_dispatcher_0_csr_translator_avalon_universal_slave_0_agent_rdata_fifo_out_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (modular_sgdma_dispatcher_0_csr_translator_avalon_universal_slave_0_agent_rdata_fifo_out_valid),       //                .valid
		.rdata_fifo_sink_data    (modular_sgdma_dispatcher_0_csr_translator_avalon_universal_slave_0_agent_rdata_fifo_out_data),        //                .data
		.rdata_fifo_src_ready    (modular_sgdma_dispatcher_0_csr_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (modular_sgdma_dispatcher_0_csr_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (modular_sgdma_dispatcher_0_csr_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                                                               //     (terminated)
		.m0_writeresponserequest (),                                                                                                    //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                                                 //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (117),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) modular_sgdma_dispatcher_0_csr_translator_avalon_universal_slave_0_agent_rsp_fifo (
		.clk               (hps_0_h2f_user0_clock_clk),                                                                           //       clk.clk
		.reset             (sysid_qsys_reset_reset_bridge_in_reset_reset),                                                        // clk_reset.reset
		.in_data           (modular_sgdma_dispatcher_0_csr_translator_avalon_universal_slave_0_agent_rf_source_data),             //        in.data
		.in_valid          (modular_sgdma_dispatcher_0_csr_translator_avalon_universal_slave_0_agent_rf_source_valid),            //          .valid
		.in_ready          (modular_sgdma_dispatcher_0_csr_translator_avalon_universal_slave_0_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (modular_sgdma_dispatcher_0_csr_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (modular_sgdma_dispatcher_0_csr_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (modular_sgdma_dispatcher_0_csr_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (modular_sgdma_dispatcher_0_csr_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (modular_sgdma_dispatcher_0_csr_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (modular_sgdma_dispatcher_0_csr_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (modular_sgdma_dispatcher_0_csr_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                                                               // (terminated)
		.csr_read          (1'b0),                                                                                                // (terminated)
		.csr_write         (1'b0),                                                                                                // (terminated)
		.csr_readdata      (),                                                                                                    // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                                                // (terminated)
		.almost_full_data  (),                                                                                                    // (terminated)
		.almost_empty_data (),                                                                                                    // (terminated)
		.in_empty          (1'b0),                                                                                                // (terminated)
		.out_empty         (),                                                                                                    // (terminated)
		.in_error          (1'b0),                                                                                                // (terminated)
		.out_error         (),                                                                                                    // (terminated)
		.in_channel        (1'b0),                                                                                                // (terminated)
		.out_channel       ()                                                                                                     // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) modular_sgdma_dispatcher_0_csr_translator_avalon_universal_slave_0_agent_rdata_fifo (
		.clk               (hps_0_h2f_user0_clock_clk),                                                                     //       clk.clk
		.reset             (sysid_qsys_reset_reset_bridge_in_reset_reset),                                                  // clk_reset.reset
		.in_data           (modular_sgdma_dispatcher_0_csr_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (modular_sgdma_dispatcher_0_csr_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (modular_sgdma_dispatcher_0_csr_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (modular_sgdma_dispatcher_0_csr_translator_avalon_universal_slave_0_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (modular_sgdma_dispatcher_0_csr_translator_avalon_universal_slave_0_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (modular_sgdma_dispatcher_0_csr_translator_avalon_universal_slave_0_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                                                         // (terminated)
		.csr_read          (1'b0),                                                                                          // (terminated)
		.csr_write         (1'b0),                                                                                          // (terminated)
		.csr_readdata      (),                                                                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                                          // (terminated)
		.almost_full_data  (),                                                                                              // (terminated)
		.almost_empty_data (),                                                                                              // (terminated)
		.in_startofpacket  (1'b0),                                                                                          // (terminated)
		.in_endofpacket    (1'b0),                                                                                          // (terminated)
		.out_startofpacket (),                                                                                              // (terminated)
		.out_endofpacket   (),                                                                                              // (terminated)
		.in_empty          (1'b0),                                                                                          // (terminated)
		.out_empty         (),                                                                                              // (terminated)
		.in_error          (1'b0),                                                                                          // (terminated)
		.out_error         (),                                                                                              // (terminated)
		.in_channel        (1'b0),                                                                                          // (terminated)
		.out_channel       ()                                                                                               // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (127),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (194),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (143),
		.PKT_BYTEEN_L              (128),
		.PKT_ADDR_H                (164),
		.PKT_ADDR_L                (144),
		.PKT_TRANS_COMPRESSED_READ (165),
		.PKT_TRANS_POSTED          (166),
		.PKT_TRANS_WRITE           (167),
		.PKT_TRANS_READ            (168),
		.PKT_TRANS_LOCK            (169),
		.PKT_SRC_ID_H              (197),
		.PKT_SRC_ID_L              (196),
		.PKT_DEST_ID_H             (199),
		.PKT_DEST_ID_L             (198),
		.PKT_BURSTWRAP_H           (186),
		.PKT_BURSTWRAP_L           (180),
		.PKT_BYTE_CNT_H            (179),
		.PKT_BYTE_CNT_L            (171),
		.PKT_PROTECTION_H          (214),
		.PKT_PROTECTION_L          (212),
		.PKT_RESPONSE_STATUS_H     (220),
		.PKT_RESPONSE_STATUS_L     (219),
		.PKT_BURST_SIZE_H          (189),
		.PKT_BURST_SIZE_L          (187),
		.PKT_ORI_BURST_SIZE_L      (221),
		.PKT_ORI_BURST_SIZE_H      (223),
		.ST_CHANNEL_W              (3),
		.ST_DATA_W                 (224),
		.AVS_BURSTCOUNT_W          (5),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) modular_sgdma_dispatcher_0_descriptor_slave_translator_avalon_universal_slave_0_agent (
		.clk                     (hps_0_h2f_user0_clock_clk),                                                                                        //             clk.clk
		.reset                   (sysid_qsys_reset_reset_bridge_in_reset_reset),                                                                     //       clk_reset.reset
		.m0_address              (modular_sgdma_dispatcher_0_descriptor_slave_translator_avalon_universal_slave_0_agent_m0_address),                 //              m0.address
		.m0_burstcount           (modular_sgdma_dispatcher_0_descriptor_slave_translator_avalon_universal_slave_0_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (modular_sgdma_dispatcher_0_descriptor_slave_translator_avalon_universal_slave_0_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (modular_sgdma_dispatcher_0_descriptor_slave_translator_avalon_universal_slave_0_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (modular_sgdma_dispatcher_0_descriptor_slave_translator_avalon_universal_slave_0_agent_m0_lock),                    //                .lock
		.m0_readdata             (modular_sgdma_dispatcher_0_descriptor_slave_translator_avalon_universal_slave_0_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (modular_sgdma_dispatcher_0_descriptor_slave_translator_avalon_universal_slave_0_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (modular_sgdma_dispatcher_0_descriptor_slave_translator_avalon_universal_slave_0_agent_m0_read),                    //                .read
		.m0_waitrequest          (modular_sgdma_dispatcher_0_descriptor_slave_translator_avalon_universal_slave_0_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (modular_sgdma_dispatcher_0_descriptor_slave_translator_avalon_universal_slave_0_agent_m0_writedata),               //                .writedata
		.m0_write                (modular_sgdma_dispatcher_0_descriptor_slave_translator_avalon_universal_slave_0_agent_m0_write),                   //                .write
		.rp_endofpacket          (modular_sgdma_dispatcher_0_descriptor_slave_translator_avalon_universal_slave_0_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (modular_sgdma_dispatcher_0_descriptor_slave_translator_avalon_universal_slave_0_agent_rp_ready),                   //                .ready
		.rp_valid                (modular_sgdma_dispatcher_0_descriptor_slave_translator_avalon_universal_slave_0_agent_rp_valid),                   //                .valid
		.rp_data                 (modular_sgdma_dispatcher_0_descriptor_slave_translator_avalon_universal_slave_0_agent_rp_data),                    //                .data
		.rp_startofpacket        (modular_sgdma_dispatcher_0_descriptor_slave_translator_avalon_universal_slave_0_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (burst_adapter_002_source0_ready),                                                                                  //              cp.ready
		.cp_valid                (burst_adapter_002_source0_valid),                                                                                  //                .valid
		.cp_data                 (burst_adapter_002_source0_data),                                                                                   //                .data
		.cp_startofpacket        (burst_adapter_002_source0_startofpacket),                                                                          //                .startofpacket
		.cp_endofpacket          (burst_adapter_002_source0_endofpacket),                                                                            //                .endofpacket
		.cp_channel              (burst_adapter_002_source0_channel),                                                                                //                .channel
		.rf_sink_ready           (modular_sgdma_dispatcher_0_descriptor_slave_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (modular_sgdma_dispatcher_0_descriptor_slave_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (modular_sgdma_dispatcher_0_descriptor_slave_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (modular_sgdma_dispatcher_0_descriptor_slave_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (modular_sgdma_dispatcher_0_descriptor_slave_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (modular_sgdma_dispatcher_0_descriptor_slave_translator_avalon_universal_slave_0_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (modular_sgdma_dispatcher_0_descriptor_slave_translator_avalon_universal_slave_0_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (modular_sgdma_dispatcher_0_descriptor_slave_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (modular_sgdma_dispatcher_0_descriptor_slave_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (modular_sgdma_dispatcher_0_descriptor_slave_translator_avalon_universal_slave_0_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (modular_sgdma_dispatcher_0_descriptor_slave_translator_avalon_universal_slave_0_agent_rdata_fifo_out_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (modular_sgdma_dispatcher_0_descriptor_slave_translator_avalon_universal_slave_0_agent_rdata_fifo_out_valid),       //                .valid
		.rdata_fifo_sink_data    (modular_sgdma_dispatcher_0_descriptor_slave_translator_avalon_universal_slave_0_agent_rdata_fifo_out_data),        //                .data
		.rdata_fifo_src_ready    (modular_sgdma_dispatcher_0_descriptor_slave_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (modular_sgdma_dispatcher_0_descriptor_slave_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (modular_sgdma_dispatcher_0_descriptor_slave_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                                                                            //     (terminated)
		.m0_writeresponserequest (),                                                                                                                 //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                                                              //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (225),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) modular_sgdma_dispatcher_0_descriptor_slave_translator_avalon_universal_slave_0_agent_rsp_fifo (
		.clk               (hps_0_h2f_user0_clock_clk),                                                                                        //       clk.clk
		.reset             (sysid_qsys_reset_reset_bridge_in_reset_reset),                                                                     // clk_reset.reset
		.in_data           (modular_sgdma_dispatcher_0_descriptor_slave_translator_avalon_universal_slave_0_agent_rf_source_data),             //        in.data
		.in_valid          (modular_sgdma_dispatcher_0_descriptor_slave_translator_avalon_universal_slave_0_agent_rf_source_valid),            //          .valid
		.in_ready          (modular_sgdma_dispatcher_0_descriptor_slave_translator_avalon_universal_slave_0_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (modular_sgdma_dispatcher_0_descriptor_slave_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (modular_sgdma_dispatcher_0_descriptor_slave_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (modular_sgdma_dispatcher_0_descriptor_slave_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (modular_sgdma_dispatcher_0_descriptor_slave_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (modular_sgdma_dispatcher_0_descriptor_slave_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (modular_sgdma_dispatcher_0_descriptor_slave_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (modular_sgdma_dispatcher_0_descriptor_slave_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                                                                            // (terminated)
		.csr_read          (1'b0),                                                                                                             // (terminated)
		.csr_write         (1'b0),                                                                                                             // (terminated)
		.csr_readdata      (),                                                                                                                 // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                                                             // (terminated)
		.almost_full_data  (),                                                                                                                 // (terminated)
		.almost_empty_data (),                                                                                                                 // (terminated)
		.in_empty          (1'b0),                                                                                                             // (terminated)
		.out_empty         (),                                                                                                                 // (terminated)
		.in_error          (1'b0),                                                                                                             // (terminated)
		.out_error         (),                                                                                                                 // (terminated)
		.in_channel        (1'b0),                                                                                                             // (terminated)
		.out_channel       ()                                                                                                                  // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (130),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) modular_sgdma_dispatcher_0_descriptor_slave_translator_avalon_universal_slave_0_agent_rdata_fifo (
		.clk               (hps_0_h2f_user0_clock_clk),                                                                                  //       clk.clk
		.reset             (sysid_qsys_reset_reset_bridge_in_reset_reset),                                                               // clk_reset.reset
		.in_data           (modular_sgdma_dispatcher_0_descriptor_slave_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (modular_sgdma_dispatcher_0_descriptor_slave_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (modular_sgdma_dispatcher_0_descriptor_slave_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (modular_sgdma_dispatcher_0_descriptor_slave_translator_avalon_universal_slave_0_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (modular_sgdma_dispatcher_0_descriptor_slave_translator_avalon_universal_slave_0_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (modular_sgdma_dispatcher_0_descriptor_slave_translator_avalon_universal_slave_0_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                                                                      // (terminated)
		.csr_read          (1'b0),                                                                                                       // (terminated)
		.csr_write         (1'b0),                                                                                                       // (terminated)
		.csr_readdata      (),                                                                                                           // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                                                       // (terminated)
		.almost_full_data  (),                                                                                                           // (terminated)
		.almost_empty_data (),                                                                                                           // (terminated)
		.in_startofpacket  (1'b0),                                                                                                       // (terminated)
		.in_endofpacket    (1'b0),                                                                                                       // (terminated)
		.out_startofpacket (),                                                                                                           // (terminated)
		.out_endofpacket   (),                                                                                                           // (terminated)
		.in_empty          (1'b0),                                                                                                       // (terminated)
		.out_empty         (),                                                                                                           // (terminated)
		.in_error          (1'b0),                                                                                                       // (terminated)
		.out_error         (),                                                                                                           // (terminated)
		.in_channel        (1'b0),                                                                                                       // (terminated)
		.out_channel       ()                                                                                                            // (terminated)
	);

	mityarm_5csx_dev_board_mm_interconnect_0_addr_router addr_router (
		.sink_ready         (hps_0_h2f_lw_axi_master_agent_write_cp_ready),         //      sink.ready
		.sink_valid         (hps_0_h2f_lw_axi_master_agent_write_cp_valid),         //          .valid
		.sink_data          (hps_0_h2f_lw_axi_master_agent_write_cp_data),          //          .data
		.sink_startofpacket (hps_0_h2f_lw_axi_master_agent_write_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (hps_0_h2f_lw_axi_master_agent_write_cp_endofpacket),   //          .endofpacket
		.clk                (hps_0_h2f_user0_clock_clk),                            //       clk.clk
		.reset              (sysid_qsys_reset_reset_bridge_in_reset_reset),         // clk_reset.reset
		.src_ready          (addr_router_src_ready),                                //       src.ready
		.src_valid          (addr_router_src_valid),                                //          .valid
		.src_data           (addr_router_src_data),                                 //          .data
		.src_channel        (addr_router_src_channel),                              //          .channel
		.src_startofpacket  (addr_router_src_startofpacket),                        //          .startofpacket
		.src_endofpacket    (addr_router_src_endofpacket)                           //          .endofpacket
	);

	mityarm_5csx_dev_board_mm_interconnect_0_addr_router addr_router_001 (
		.sink_ready         (hps_0_h2f_lw_axi_master_agent_read_cp_ready),         //      sink.ready
		.sink_valid         (hps_0_h2f_lw_axi_master_agent_read_cp_valid),         //          .valid
		.sink_data          (hps_0_h2f_lw_axi_master_agent_read_cp_data),          //          .data
		.sink_startofpacket (hps_0_h2f_lw_axi_master_agent_read_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (hps_0_h2f_lw_axi_master_agent_read_cp_endofpacket),   //          .endofpacket
		.clk                (hps_0_h2f_user0_clock_clk),                           //       clk.clk
		.reset              (sysid_qsys_reset_reset_bridge_in_reset_reset),        // clk_reset.reset
		.src_ready          (addr_router_001_src_ready),                           //       src.ready
		.src_valid          (addr_router_001_src_valid),                           //          .valid
		.src_data           (addr_router_001_src_data),                            //          .data
		.src_channel        (addr_router_001_src_channel),                         //          .channel
		.src_startofpacket  (addr_router_001_src_startofpacket),                   //          .startofpacket
		.src_endofpacket    (addr_router_001_src_endofpacket)                      //          .endofpacket
	);

	mityarm_5csx_dev_board_mm_interconnect_0_id_router id_router (
		.sink_ready         (sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent_rp_ready),         //      sink.ready
		.sink_valid         (sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent_rp_valid),         //          .valid
		.sink_data          (sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent_rp_data),          //          .data
		.sink_startofpacket (sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (sysid_qsys_control_slave_translator_avalon_universal_slave_0_agent_rp_endofpacket),   //          .endofpacket
		.clk                (hps_0_h2f_user0_clock_clk),                                                           //       clk.clk
		.reset              (sysid_qsys_reset_reset_bridge_in_reset_reset),                                        // clk_reset.reset
		.src_ready          (id_router_src_ready),                                                                 //       src.ready
		.src_valid          (id_router_src_valid),                                                                 //          .valid
		.src_data           (id_router_src_data),                                                                  //          .data
		.src_channel        (id_router_src_channel),                                                               //          .channel
		.src_startofpacket  (id_router_src_startofpacket),                                                         //          .startofpacket
		.src_endofpacket    (id_router_src_endofpacket)                                                            //          .endofpacket
	);

	mityarm_5csx_dev_board_mm_interconnect_0_id_router id_router_001 (
		.sink_ready         (modular_sgdma_dispatcher_0_csr_translator_avalon_universal_slave_0_agent_rp_ready),         //      sink.ready
		.sink_valid         (modular_sgdma_dispatcher_0_csr_translator_avalon_universal_slave_0_agent_rp_valid),         //          .valid
		.sink_data          (modular_sgdma_dispatcher_0_csr_translator_avalon_universal_slave_0_agent_rp_data),          //          .data
		.sink_startofpacket (modular_sgdma_dispatcher_0_csr_translator_avalon_universal_slave_0_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (modular_sgdma_dispatcher_0_csr_translator_avalon_universal_slave_0_agent_rp_endofpacket),   //          .endofpacket
		.clk                (hps_0_h2f_user0_clock_clk),                                                                 //       clk.clk
		.reset              (sysid_qsys_reset_reset_bridge_in_reset_reset),                                              // clk_reset.reset
		.src_ready          (id_router_001_src_ready),                                                                   //       src.ready
		.src_valid          (id_router_001_src_valid),                                                                   //          .valid
		.src_data           (id_router_001_src_data),                                                                    //          .data
		.src_channel        (id_router_001_src_channel),                                                                 //          .channel
		.src_startofpacket  (id_router_001_src_startofpacket),                                                           //          .startofpacket
		.src_endofpacket    (id_router_001_src_endofpacket)                                                              //          .endofpacket
	);

	mityarm_5csx_dev_board_mm_interconnect_0_id_router_002 id_router_002 (
		.sink_ready         (modular_sgdma_dispatcher_0_descriptor_slave_translator_avalon_universal_slave_0_agent_rp_ready),         //      sink.ready
		.sink_valid         (modular_sgdma_dispatcher_0_descriptor_slave_translator_avalon_universal_slave_0_agent_rp_valid),         //          .valid
		.sink_data          (modular_sgdma_dispatcher_0_descriptor_slave_translator_avalon_universal_slave_0_agent_rp_data),          //          .data
		.sink_startofpacket (modular_sgdma_dispatcher_0_descriptor_slave_translator_avalon_universal_slave_0_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (modular_sgdma_dispatcher_0_descriptor_slave_translator_avalon_universal_slave_0_agent_rp_endofpacket),   //          .endofpacket
		.clk                (hps_0_h2f_user0_clock_clk),                                                                              //       clk.clk
		.reset              (sysid_qsys_reset_reset_bridge_in_reset_reset),                                                           // clk_reset.reset
		.src_ready          (id_router_002_src_ready),                                                                                //       src.ready
		.src_valid          (id_router_002_src_valid),                                                                                //          .valid
		.src_data           (id_router_002_src_data),                                                                                 //          .data
		.src_channel        (id_router_002_src_channel),                                                                              //          .channel
		.src_startofpacket  (id_router_002_src_startofpacket),                                                                        //          .startofpacket
		.src_endofpacket    (id_router_002_src_endofpacket)                                                                           //          .endofpacket
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (91),
		.PKT_DEST_ID_L             (90),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (88),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.MAX_OUTSTANDING_RESPONSES (3),
		.PIPELINED                 (0),
		.ST_DATA_W                 (116),
		.ST_CHANNEL_W              (3),
		.VALID_WIDTH               (3),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.PKT_BYTE_CNT_H            (71),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.REORDER                   (0)
	) limiter (
		.clk                    (hps_0_h2f_user0_clock_clk),                    //       clk.clk
		.reset                  (sysid_qsys_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.cmd_sink_ready         (addr_router_src_ready),                        //  cmd_sink.ready
		.cmd_sink_valid         (addr_router_src_valid),                        //          .valid
		.cmd_sink_data          (addr_router_src_data),                         //          .data
		.cmd_sink_channel       (addr_router_src_channel),                      //          .channel
		.cmd_sink_startofpacket (addr_router_src_startofpacket),                //          .startofpacket
		.cmd_sink_endofpacket   (addr_router_src_endofpacket),                  //          .endofpacket
		.cmd_src_ready          (limiter_cmd_src_ready),                        //   cmd_src.ready
		.cmd_src_data           (limiter_cmd_src_data),                         //          .data
		.cmd_src_channel        (limiter_cmd_src_channel),                      //          .channel
		.cmd_src_startofpacket  (limiter_cmd_src_startofpacket),                //          .startofpacket
		.cmd_src_endofpacket    (limiter_cmd_src_endofpacket),                  //          .endofpacket
		.rsp_sink_ready         (rsp_xbar_mux_src_ready),                       //  rsp_sink.ready
		.rsp_sink_valid         (rsp_xbar_mux_src_valid),                       //          .valid
		.rsp_sink_channel       (rsp_xbar_mux_src_channel),                     //          .channel
		.rsp_sink_data          (rsp_xbar_mux_src_data),                        //          .data
		.rsp_sink_startofpacket (rsp_xbar_mux_src_startofpacket),               //          .startofpacket
		.rsp_sink_endofpacket   (rsp_xbar_mux_src_endofpacket),                 //          .endofpacket
		.rsp_src_ready          (limiter_rsp_src_ready),                        //   rsp_src.ready
		.rsp_src_valid          (limiter_rsp_src_valid),                        //          .valid
		.rsp_src_data           (limiter_rsp_src_data),                         //          .data
		.rsp_src_channel        (limiter_rsp_src_channel),                      //          .channel
		.rsp_src_startofpacket  (limiter_rsp_src_startofpacket),                //          .startofpacket
		.rsp_src_endofpacket    (limiter_rsp_src_endofpacket),                  //          .endofpacket
		.cmd_src_valid          (limiter_cmd_valid_data)                        // cmd_valid.data
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (91),
		.PKT_DEST_ID_L             (90),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (88),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.MAX_OUTSTANDING_RESPONSES (3),
		.PIPELINED                 (0),
		.ST_DATA_W                 (116),
		.ST_CHANNEL_W              (3),
		.VALID_WIDTH               (3),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.PKT_BYTE_CNT_H            (71),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.REORDER                   (0)
	) limiter_001 (
		.clk                    (hps_0_h2f_user0_clock_clk),                    //       clk.clk
		.reset                  (sysid_qsys_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.cmd_sink_ready         (addr_router_001_src_ready),                    //  cmd_sink.ready
		.cmd_sink_valid         (addr_router_001_src_valid),                    //          .valid
		.cmd_sink_data          (addr_router_001_src_data),                     //          .data
		.cmd_sink_channel       (addr_router_001_src_channel),                  //          .channel
		.cmd_sink_startofpacket (addr_router_001_src_startofpacket),            //          .startofpacket
		.cmd_sink_endofpacket   (addr_router_001_src_endofpacket),              //          .endofpacket
		.cmd_src_ready          (limiter_001_cmd_src_ready),                    //   cmd_src.ready
		.cmd_src_data           (limiter_001_cmd_src_data),                     //          .data
		.cmd_src_channel        (limiter_001_cmd_src_channel),                  //          .channel
		.cmd_src_startofpacket  (limiter_001_cmd_src_startofpacket),            //          .startofpacket
		.cmd_src_endofpacket    (limiter_001_cmd_src_endofpacket),              //          .endofpacket
		.rsp_sink_ready         (rsp_xbar_mux_001_src_ready),                   //  rsp_sink.ready
		.rsp_sink_valid         (rsp_xbar_mux_001_src_valid),                   //          .valid
		.rsp_sink_channel       (rsp_xbar_mux_001_src_channel),                 //          .channel
		.rsp_sink_data          (rsp_xbar_mux_001_src_data),                    //          .data
		.rsp_sink_startofpacket (rsp_xbar_mux_001_src_startofpacket),           //          .startofpacket
		.rsp_sink_endofpacket   (rsp_xbar_mux_001_src_endofpacket),             //          .endofpacket
		.rsp_src_ready          (limiter_001_rsp_src_ready),                    //   rsp_src.ready
		.rsp_src_valid          (limiter_001_rsp_src_valid),                    //          .valid
		.rsp_src_data           (limiter_001_rsp_src_data),                     //          .data
		.rsp_src_channel        (limiter_001_rsp_src_channel),                  //          .channel
		.rsp_src_startofpacket  (limiter_001_rsp_src_startofpacket),            //          .startofpacket
		.rsp_src_endofpacket    (limiter_001_rsp_src_endofpacket),              //          .endofpacket
		.cmd_src_valid          (limiter_001_cmd_valid_data)                    // cmd_valid.data
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (86),
		.PKT_BYTE_CNT_H            (71),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (81),
		.PKT_BURST_SIZE_L          (79),
		.PKT_BURST_TYPE_H          (83),
		.PKT_BURST_TYPE_L          (82),
		.PKT_BURSTWRAP_H           (78),
		.PKT_BURSTWRAP_L           (72),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (116),
		.ST_CHANNEL_W              (3),
		.OUT_BYTE_CNT_H            (65),
		.OUT_BURSTWRAP_H           (78),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0)
	) burst_adapter (
		.clk                   (hps_0_h2f_user0_clock_clk),                    //       cr0.clk
		.reset                 (sysid_qsys_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.sink0_valid           (cmd_xbar_mux_src_valid),                       //     sink0.valid
		.sink0_data            (cmd_xbar_mux_src_data),                        //          .data
		.sink0_channel         (cmd_xbar_mux_src_channel),                     //          .channel
		.sink0_startofpacket   (cmd_xbar_mux_src_startofpacket),               //          .startofpacket
		.sink0_endofpacket     (cmd_xbar_mux_src_endofpacket),                 //          .endofpacket
		.sink0_ready           (cmd_xbar_mux_src_ready),                       //          .ready
		.source0_valid         (burst_adapter_source0_valid),                  //   source0.valid
		.source0_data          (burst_adapter_source0_data),                   //          .data
		.source0_channel       (burst_adapter_source0_channel),                //          .channel
		.source0_startofpacket (burst_adapter_source0_startofpacket),          //          .startofpacket
		.source0_endofpacket   (burst_adapter_source0_endofpacket),            //          .endofpacket
		.source0_ready         (burst_adapter_source0_ready)                   //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (86),
		.PKT_BYTE_CNT_H            (71),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (81),
		.PKT_BURST_SIZE_L          (79),
		.PKT_BURST_TYPE_H          (83),
		.PKT_BURST_TYPE_L          (82),
		.PKT_BURSTWRAP_H           (78),
		.PKT_BURSTWRAP_L           (72),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (116),
		.ST_CHANNEL_W              (3),
		.OUT_BYTE_CNT_H            (65),
		.OUT_BURSTWRAP_H           (78),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0)
	) burst_adapter_001 (
		.clk                   (hps_0_h2f_user0_clock_clk),                    //       cr0.clk
		.reset                 (sysid_qsys_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.sink0_valid           (cmd_xbar_mux_001_src_valid),                   //     sink0.valid
		.sink0_data            (cmd_xbar_mux_001_src_data),                    //          .data
		.sink0_channel         (cmd_xbar_mux_001_src_channel),                 //          .channel
		.sink0_startofpacket   (cmd_xbar_mux_001_src_startofpacket),           //          .startofpacket
		.sink0_endofpacket     (cmd_xbar_mux_001_src_endofpacket),             //          .endofpacket
		.sink0_ready           (cmd_xbar_mux_001_src_ready),                   //          .ready
		.source0_valid         (burst_adapter_001_source0_valid),              //   source0.valid
		.source0_data          (burst_adapter_001_source0_data),               //          .data
		.source0_channel       (burst_adapter_001_source0_channel),            //          .channel
		.source0_startofpacket (burst_adapter_001_source0_startofpacket),      //          .startofpacket
		.source0_endofpacket   (burst_adapter_001_source0_endofpacket),        //          .endofpacket
		.source0_ready         (burst_adapter_001_source0_ready)               //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (164),
		.PKT_ADDR_L                (144),
		.PKT_BEGIN_BURST           (194),
		.PKT_BYTE_CNT_H            (179),
		.PKT_BYTE_CNT_L            (171),
		.PKT_BYTEEN_H              (143),
		.PKT_BYTEEN_L              (128),
		.PKT_BURST_SIZE_H          (189),
		.PKT_BURST_SIZE_L          (187),
		.PKT_BURST_TYPE_H          (191),
		.PKT_BURST_TYPE_L          (190),
		.PKT_BURSTWRAP_H           (186),
		.PKT_BURSTWRAP_L           (180),
		.PKT_TRANS_COMPRESSED_READ (165),
		.PKT_TRANS_WRITE           (167),
		.PKT_TRANS_READ            (168),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (224),
		.ST_CHANNEL_W              (3),
		.OUT_BYTE_CNT_H            (175),
		.OUT_BURSTWRAP_H           (186),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0)
	) burst_adapter_002 (
		.clk                   (hps_0_h2f_user0_clock_clk),                    //       cr0.clk
		.reset                 (sysid_qsys_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.sink0_valid           (width_adapter_001_src_valid),                  //     sink0.valid
		.sink0_data            (width_adapter_001_src_data),                   //          .data
		.sink0_channel         (width_adapter_001_src_channel),                //          .channel
		.sink0_startofpacket   (width_adapter_001_src_startofpacket),          //          .startofpacket
		.sink0_endofpacket     (width_adapter_001_src_endofpacket),            //          .endofpacket
		.sink0_ready           (width_adapter_001_src_ready),                  //          .ready
		.source0_valid         (burst_adapter_002_source0_valid),              //   source0.valid
		.source0_data          (burst_adapter_002_source0_data),               //          .data
		.source0_channel       (burst_adapter_002_source0_channel),            //          .channel
		.source0_startofpacket (burst_adapter_002_source0_startofpacket),      //          .startofpacket
		.source0_endofpacket   (burst_adapter_002_source0_endofpacket),        //          .endofpacket
		.source0_ready         (burst_adapter_002_source0_ready)               //          .ready
	);

	mityarm_5csx_dev_board_mm_interconnect_0_cmd_xbar_demux cmd_xbar_demux (
		.clk                (hps_0_h2f_user0_clock_clk),                    //        clk.clk
		.reset              (sysid_qsys_reset_reset_bridge_in_reset_reset), //  clk_reset.reset
		.sink_ready         (limiter_cmd_src_ready),                        //       sink.ready
		.sink_channel       (limiter_cmd_src_channel),                      //           .channel
		.sink_data          (limiter_cmd_src_data),                         //           .data
		.sink_startofpacket (limiter_cmd_src_startofpacket),                //           .startofpacket
		.sink_endofpacket   (limiter_cmd_src_endofpacket),                  //           .endofpacket
		.sink_valid         (limiter_cmd_valid_data),                       // sink_valid.data
		.src0_ready         (cmd_xbar_demux_src0_ready),                    //       src0.ready
		.src0_valid         (cmd_xbar_demux_src0_valid),                    //           .valid
		.src0_data          (cmd_xbar_demux_src0_data),                     //           .data
		.src0_channel       (cmd_xbar_demux_src0_channel),                  //           .channel
		.src0_startofpacket (cmd_xbar_demux_src0_startofpacket),            //           .startofpacket
		.src0_endofpacket   (cmd_xbar_demux_src0_endofpacket),              //           .endofpacket
		.src1_ready         (cmd_xbar_demux_src1_ready),                    //       src1.ready
		.src1_valid         (cmd_xbar_demux_src1_valid),                    //           .valid
		.src1_data          (cmd_xbar_demux_src1_data),                     //           .data
		.src1_channel       (cmd_xbar_demux_src1_channel),                  //           .channel
		.src1_startofpacket (cmd_xbar_demux_src1_startofpacket),            //           .startofpacket
		.src1_endofpacket   (cmd_xbar_demux_src1_endofpacket),              //           .endofpacket
		.src2_ready         (cmd_xbar_demux_src2_ready),                    //       src2.ready
		.src2_valid         (cmd_xbar_demux_src2_valid),                    //           .valid
		.src2_data          (cmd_xbar_demux_src2_data),                     //           .data
		.src2_channel       (cmd_xbar_demux_src2_channel),                  //           .channel
		.src2_startofpacket (cmd_xbar_demux_src2_startofpacket),            //           .startofpacket
		.src2_endofpacket   (cmd_xbar_demux_src2_endofpacket)               //           .endofpacket
	);

	mityarm_5csx_dev_board_mm_interconnect_0_cmd_xbar_demux cmd_xbar_demux_001 (
		.clk                (hps_0_h2f_user0_clock_clk),                    //        clk.clk
		.reset              (sysid_qsys_reset_reset_bridge_in_reset_reset), //  clk_reset.reset
		.sink_ready         (limiter_001_cmd_src_ready),                    //       sink.ready
		.sink_channel       (limiter_001_cmd_src_channel),                  //           .channel
		.sink_data          (limiter_001_cmd_src_data),                     //           .data
		.sink_startofpacket (limiter_001_cmd_src_startofpacket),            //           .startofpacket
		.sink_endofpacket   (limiter_001_cmd_src_endofpacket),              //           .endofpacket
		.sink_valid         (limiter_001_cmd_valid_data),                   // sink_valid.data
		.src0_ready         (cmd_xbar_demux_001_src0_ready),                //       src0.ready
		.src0_valid         (cmd_xbar_demux_001_src0_valid),                //           .valid
		.src0_data          (cmd_xbar_demux_001_src0_data),                 //           .data
		.src0_channel       (cmd_xbar_demux_001_src0_channel),              //           .channel
		.src0_startofpacket (cmd_xbar_demux_001_src0_startofpacket),        //           .startofpacket
		.src0_endofpacket   (cmd_xbar_demux_001_src0_endofpacket),          //           .endofpacket
		.src1_ready         (cmd_xbar_demux_001_src1_ready),                //       src1.ready
		.src1_valid         (cmd_xbar_demux_001_src1_valid),                //           .valid
		.src1_data          (cmd_xbar_demux_001_src1_data),                 //           .data
		.src1_channel       (cmd_xbar_demux_001_src1_channel),              //           .channel
		.src1_startofpacket (cmd_xbar_demux_001_src1_startofpacket),        //           .startofpacket
		.src1_endofpacket   (cmd_xbar_demux_001_src1_endofpacket),          //           .endofpacket
		.src2_ready         (cmd_xbar_demux_001_src2_ready),                //       src2.ready
		.src2_valid         (cmd_xbar_demux_001_src2_valid),                //           .valid
		.src2_data          (cmd_xbar_demux_001_src2_data),                 //           .data
		.src2_channel       (cmd_xbar_demux_001_src2_channel),              //           .channel
		.src2_startofpacket (cmd_xbar_demux_001_src2_startofpacket),        //           .startofpacket
		.src2_endofpacket   (cmd_xbar_demux_001_src2_endofpacket)           //           .endofpacket
	);

	mityarm_5csx_dev_board_mm_interconnect_0_cmd_xbar_mux cmd_xbar_mux (
		.clk                 (hps_0_h2f_user0_clock_clk),                    //       clk.clk
		.reset               (sysid_qsys_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_xbar_mux_src_ready),                       //       src.ready
		.src_valid           (cmd_xbar_mux_src_valid),                       //          .valid
		.src_data            (cmd_xbar_mux_src_data),                        //          .data
		.src_channel         (cmd_xbar_mux_src_channel),                     //          .channel
		.src_startofpacket   (cmd_xbar_mux_src_startofpacket),               //          .startofpacket
		.src_endofpacket     (cmd_xbar_mux_src_endofpacket),                 //          .endofpacket
		.sink0_ready         (cmd_xbar_demux_src0_ready),                    //     sink0.ready
		.sink0_valid         (cmd_xbar_demux_src0_valid),                    //          .valid
		.sink0_channel       (cmd_xbar_demux_src0_channel),                  //          .channel
		.sink0_data          (cmd_xbar_demux_src0_data),                     //          .data
		.sink0_startofpacket (cmd_xbar_demux_src0_startofpacket),            //          .startofpacket
		.sink0_endofpacket   (cmd_xbar_demux_src0_endofpacket),              //          .endofpacket
		.sink1_ready         (cmd_xbar_demux_001_src0_ready),                //     sink1.ready
		.sink1_valid         (cmd_xbar_demux_001_src0_valid),                //          .valid
		.sink1_channel       (cmd_xbar_demux_001_src0_channel),              //          .channel
		.sink1_data          (cmd_xbar_demux_001_src0_data),                 //          .data
		.sink1_startofpacket (cmd_xbar_demux_001_src0_startofpacket),        //          .startofpacket
		.sink1_endofpacket   (cmd_xbar_demux_001_src0_endofpacket)           //          .endofpacket
	);

	mityarm_5csx_dev_board_mm_interconnect_0_cmd_xbar_mux cmd_xbar_mux_001 (
		.clk                 (hps_0_h2f_user0_clock_clk),                    //       clk.clk
		.reset               (sysid_qsys_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_xbar_mux_001_src_ready),                   //       src.ready
		.src_valid           (cmd_xbar_mux_001_src_valid),                   //          .valid
		.src_data            (cmd_xbar_mux_001_src_data),                    //          .data
		.src_channel         (cmd_xbar_mux_001_src_channel),                 //          .channel
		.src_startofpacket   (cmd_xbar_mux_001_src_startofpacket),           //          .startofpacket
		.src_endofpacket     (cmd_xbar_mux_001_src_endofpacket),             //          .endofpacket
		.sink0_ready         (cmd_xbar_demux_src1_ready),                    //     sink0.ready
		.sink0_valid         (cmd_xbar_demux_src1_valid),                    //          .valid
		.sink0_channel       (cmd_xbar_demux_src1_channel),                  //          .channel
		.sink0_data          (cmd_xbar_demux_src1_data),                     //          .data
		.sink0_startofpacket (cmd_xbar_demux_src1_startofpacket),            //          .startofpacket
		.sink0_endofpacket   (cmd_xbar_demux_src1_endofpacket),              //          .endofpacket
		.sink1_ready         (cmd_xbar_demux_001_src1_ready),                //     sink1.ready
		.sink1_valid         (cmd_xbar_demux_001_src1_valid),                //          .valid
		.sink1_channel       (cmd_xbar_demux_001_src1_channel),              //          .channel
		.sink1_data          (cmd_xbar_demux_001_src1_data),                 //          .data
		.sink1_startofpacket (cmd_xbar_demux_001_src1_startofpacket),        //          .startofpacket
		.sink1_endofpacket   (cmd_xbar_demux_001_src1_endofpacket)           //          .endofpacket
	);

	mityarm_5csx_dev_board_mm_interconnect_0_cmd_xbar_mux cmd_xbar_mux_002 (
		.clk                 (hps_0_h2f_user0_clock_clk),                    //       clk.clk
		.reset               (sysid_qsys_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_xbar_mux_002_src_ready),                   //       src.ready
		.src_valid           (cmd_xbar_mux_002_src_valid),                   //          .valid
		.src_data            (cmd_xbar_mux_002_src_data),                    //          .data
		.src_channel         (cmd_xbar_mux_002_src_channel),                 //          .channel
		.src_startofpacket   (cmd_xbar_mux_002_src_startofpacket),           //          .startofpacket
		.src_endofpacket     (cmd_xbar_mux_002_src_endofpacket),             //          .endofpacket
		.sink0_ready         (cmd_xbar_demux_src2_ready),                    //     sink0.ready
		.sink0_valid         (cmd_xbar_demux_src2_valid),                    //          .valid
		.sink0_channel       (cmd_xbar_demux_src2_channel),                  //          .channel
		.sink0_data          (cmd_xbar_demux_src2_data),                     //          .data
		.sink0_startofpacket (cmd_xbar_demux_src2_startofpacket),            //          .startofpacket
		.sink0_endofpacket   (cmd_xbar_demux_src2_endofpacket),              //          .endofpacket
		.sink1_ready         (cmd_xbar_demux_001_src2_ready),                //     sink1.ready
		.sink1_valid         (cmd_xbar_demux_001_src2_valid),                //          .valid
		.sink1_channel       (cmd_xbar_demux_001_src2_channel),              //          .channel
		.sink1_data          (cmd_xbar_demux_001_src2_data),                 //          .data
		.sink1_startofpacket (cmd_xbar_demux_001_src2_startofpacket),        //          .startofpacket
		.sink1_endofpacket   (cmd_xbar_demux_001_src2_endofpacket)           //          .endofpacket
	);

	mityarm_5csx_dev_board_mm_interconnect_0_rsp_xbar_demux rsp_xbar_demux (
		.clk                (hps_0_h2f_user0_clock_clk),                    //       clk.clk
		.reset              (sysid_qsys_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (id_router_src_ready),                          //      sink.ready
		.sink_channel       (id_router_src_channel),                        //          .channel
		.sink_data          (id_router_src_data),                           //          .data
		.sink_startofpacket (id_router_src_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (id_router_src_endofpacket),                    //          .endofpacket
		.sink_valid         (id_router_src_valid),                          //          .valid
		.src0_ready         (rsp_xbar_demux_src0_ready),                    //      src0.ready
		.src0_valid         (rsp_xbar_demux_src0_valid),                    //          .valid
		.src0_data          (rsp_xbar_demux_src0_data),                     //          .data
		.src0_channel       (rsp_xbar_demux_src0_channel),                  //          .channel
		.src0_startofpacket (rsp_xbar_demux_src0_startofpacket),            //          .startofpacket
		.src0_endofpacket   (rsp_xbar_demux_src0_endofpacket),              //          .endofpacket
		.src1_ready         (rsp_xbar_demux_src1_ready),                    //      src1.ready
		.src1_valid         (rsp_xbar_demux_src1_valid),                    //          .valid
		.src1_data          (rsp_xbar_demux_src1_data),                     //          .data
		.src1_channel       (rsp_xbar_demux_src1_channel),                  //          .channel
		.src1_startofpacket (rsp_xbar_demux_src1_startofpacket),            //          .startofpacket
		.src1_endofpacket   (rsp_xbar_demux_src1_endofpacket)               //          .endofpacket
	);

	mityarm_5csx_dev_board_mm_interconnect_0_rsp_xbar_demux rsp_xbar_demux_001 (
		.clk                (hps_0_h2f_user0_clock_clk),                    //       clk.clk
		.reset              (sysid_qsys_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (id_router_001_src_ready),                      //      sink.ready
		.sink_channel       (id_router_001_src_channel),                    //          .channel
		.sink_data          (id_router_001_src_data),                       //          .data
		.sink_startofpacket (id_router_001_src_startofpacket),              //          .startofpacket
		.sink_endofpacket   (id_router_001_src_endofpacket),                //          .endofpacket
		.sink_valid         (id_router_001_src_valid),                      //          .valid
		.src0_ready         (rsp_xbar_demux_001_src0_ready),                //      src0.ready
		.src0_valid         (rsp_xbar_demux_001_src0_valid),                //          .valid
		.src0_data          (rsp_xbar_demux_001_src0_data),                 //          .data
		.src0_channel       (rsp_xbar_demux_001_src0_channel),              //          .channel
		.src0_startofpacket (rsp_xbar_demux_001_src0_startofpacket),        //          .startofpacket
		.src0_endofpacket   (rsp_xbar_demux_001_src0_endofpacket),          //          .endofpacket
		.src1_ready         (rsp_xbar_demux_001_src1_ready),                //      src1.ready
		.src1_valid         (rsp_xbar_demux_001_src1_valid),                //          .valid
		.src1_data          (rsp_xbar_demux_001_src1_data),                 //          .data
		.src1_channel       (rsp_xbar_demux_001_src1_channel),              //          .channel
		.src1_startofpacket (rsp_xbar_demux_001_src1_startofpacket),        //          .startofpacket
		.src1_endofpacket   (rsp_xbar_demux_001_src1_endofpacket)           //          .endofpacket
	);

	mityarm_5csx_dev_board_mm_interconnect_0_rsp_xbar_demux rsp_xbar_demux_002 (
		.clk                (hps_0_h2f_user0_clock_clk),                    //       clk.clk
		.reset              (sysid_qsys_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (width_adapter_src_ready),                      //      sink.ready
		.sink_channel       (width_adapter_src_channel),                    //          .channel
		.sink_data          (width_adapter_src_data),                       //          .data
		.sink_startofpacket (width_adapter_src_startofpacket),              //          .startofpacket
		.sink_endofpacket   (width_adapter_src_endofpacket),                //          .endofpacket
		.sink_valid         (width_adapter_src_valid),                      //          .valid
		.src0_ready         (rsp_xbar_demux_002_src0_ready),                //      src0.ready
		.src0_valid         (rsp_xbar_demux_002_src0_valid),                //          .valid
		.src0_data          (rsp_xbar_demux_002_src0_data),                 //          .data
		.src0_channel       (rsp_xbar_demux_002_src0_channel),              //          .channel
		.src0_startofpacket (rsp_xbar_demux_002_src0_startofpacket),        //          .startofpacket
		.src0_endofpacket   (rsp_xbar_demux_002_src0_endofpacket),          //          .endofpacket
		.src1_ready         (rsp_xbar_demux_002_src1_ready),                //      src1.ready
		.src1_valid         (rsp_xbar_demux_002_src1_valid),                //          .valid
		.src1_data          (rsp_xbar_demux_002_src1_data),                 //          .data
		.src1_channel       (rsp_xbar_demux_002_src1_channel),              //          .channel
		.src1_startofpacket (rsp_xbar_demux_002_src1_startofpacket),        //          .startofpacket
		.src1_endofpacket   (rsp_xbar_demux_002_src1_endofpacket)           //          .endofpacket
	);

	mityarm_5csx_dev_board_mm_interconnect_0_rsp_xbar_mux rsp_xbar_mux (
		.clk                 (hps_0_h2f_user0_clock_clk),                    //       clk.clk
		.reset               (sysid_qsys_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_xbar_mux_src_ready),                       //       src.ready
		.src_valid           (rsp_xbar_mux_src_valid),                       //          .valid
		.src_data            (rsp_xbar_mux_src_data),                        //          .data
		.src_channel         (rsp_xbar_mux_src_channel),                     //          .channel
		.src_startofpacket   (rsp_xbar_mux_src_startofpacket),               //          .startofpacket
		.src_endofpacket     (rsp_xbar_mux_src_endofpacket),                 //          .endofpacket
		.sink0_ready         (rsp_xbar_demux_src0_ready),                    //     sink0.ready
		.sink0_valid         (rsp_xbar_demux_src0_valid),                    //          .valid
		.sink0_channel       (rsp_xbar_demux_src0_channel),                  //          .channel
		.sink0_data          (rsp_xbar_demux_src0_data),                     //          .data
		.sink0_startofpacket (rsp_xbar_demux_src0_startofpacket),            //          .startofpacket
		.sink0_endofpacket   (rsp_xbar_demux_src0_endofpacket),              //          .endofpacket
		.sink1_ready         (rsp_xbar_demux_001_src0_ready),                //     sink1.ready
		.sink1_valid         (rsp_xbar_demux_001_src0_valid),                //          .valid
		.sink1_channel       (rsp_xbar_demux_001_src0_channel),              //          .channel
		.sink1_data          (rsp_xbar_demux_001_src0_data),                 //          .data
		.sink1_startofpacket (rsp_xbar_demux_001_src0_startofpacket),        //          .startofpacket
		.sink1_endofpacket   (rsp_xbar_demux_001_src0_endofpacket),          //          .endofpacket
		.sink2_ready         (rsp_xbar_demux_002_src0_ready),                //     sink2.ready
		.sink2_valid         (rsp_xbar_demux_002_src0_valid),                //          .valid
		.sink2_channel       (rsp_xbar_demux_002_src0_channel),              //          .channel
		.sink2_data          (rsp_xbar_demux_002_src0_data),                 //          .data
		.sink2_startofpacket (rsp_xbar_demux_002_src0_startofpacket),        //          .startofpacket
		.sink2_endofpacket   (rsp_xbar_demux_002_src0_endofpacket)           //          .endofpacket
	);

	mityarm_5csx_dev_board_mm_interconnect_0_rsp_xbar_mux rsp_xbar_mux_001 (
		.clk                 (hps_0_h2f_user0_clock_clk),                    //       clk.clk
		.reset               (sysid_qsys_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_xbar_mux_001_src_ready),                   //       src.ready
		.src_valid           (rsp_xbar_mux_001_src_valid),                   //          .valid
		.src_data            (rsp_xbar_mux_001_src_data),                    //          .data
		.src_channel         (rsp_xbar_mux_001_src_channel),                 //          .channel
		.src_startofpacket   (rsp_xbar_mux_001_src_startofpacket),           //          .startofpacket
		.src_endofpacket     (rsp_xbar_mux_001_src_endofpacket),             //          .endofpacket
		.sink0_ready         (rsp_xbar_demux_src1_ready),                    //     sink0.ready
		.sink0_valid         (rsp_xbar_demux_src1_valid),                    //          .valid
		.sink0_channel       (rsp_xbar_demux_src1_channel),                  //          .channel
		.sink0_data          (rsp_xbar_demux_src1_data),                     //          .data
		.sink0_startofpacket (rsp_xbar_demux_src1_startofpacket),            //          .startofpacket
		.sink0_endofpacket   (rsp_xbar_demux_src1_endofpacket),              //          .endofpacket
		.sink1_ready         (rsp_xbar_demux_001_src1_ready),                //     sink1.ready
		.sink1_valid         (rsp_xbar_demux_001_src1_valid),                //          .valid
		.sink1_channel       (rsp_xbar_demux_001_src1_channel),              //          .channel
		.sink1_data          (rsp_xbar_demux_001_src1_data),                 //          .data
		.sink1_startofpacket (rsp_xbar_demux_001_src1_startofpacket),        //          .startofpacket
		.sink1_endofpacket   (rsp_xbar_demux_001_src1_endofpacket),          //          .endofpacket
		.sink2_ready         (rsp_xbar_demux_002_src1_ready),                //     sink2.ready
		.sink2_valid         (rsp_xbar_demux_002_src1_valid),                //          .valid
		.sink2_channel       (rsp_xbar_demux_002_src1_channel),              //          .channel
		.sink2_data          (rsp_xbar_demux_002_src1_data),                 //          .data
		.sink2_startofpacket (rsp_xbar_demux_002_src1_startofpacket),        //          .startofpacket
		.sink2_endofpacket   (rsp_xbar_demux_002_src1_endofpacket)           //          .endofpacket
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (164),
		.IN_PKT_ADDR_L                 (144),
		.IN_PKT_DATA_H                 (127),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (143),
		.IN_PKT_BYTEEN_L               (128),
		.IN_PKT_BYTE_CNT_H             (179),
		.IN_PKT_BYTE_CNT_L             (171),
		.IN_PKT_TRANS_COMPRESSED_READ  (165),
		.IN_PKT_BURSTWRAP_H            (186),
		.IN_PKT_BURSTWRAP_L            (180),
		.IN_PKT_BURST_SIZE_H           (189),
		.IN_PKT_BURST_SIZE_L           (187),
		.IN_PKT_RESPONSE_STATUS_H      (220),
		.IN_PKT_RESPONSE_STATUS_L      (219),
		.IN_PKT_TRANS_EXCLUSIVE        (170),
		.IN_PKT_BURST_TYPE_H           (191),
		.IN_PKT_BURST_TYPE_L           (190),
		.IN_PKT_ORI_BURST_SIZE_L       (221),
		.IN_PKT_ORI_BURST_SIZE_H       (223),
		.IN_ST_DATA_W                  (224),
		.OUT_PKT_ADDR_H                (56),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (71),
		.OUT_PKT_BYTE_CNT_L            (63),
		.OUT_PKT_TRANS_COMPRESSED_READ (57),
		.OUT_PKT_BURST_SIZE_H          (81),
		.OUT_PKT_BURST_SIZE_L          (79),
		.OUT_PKT_RESPONSE_STATUS_H     (112),
		.OUT_PKT_RESPONSE_STATUS_L     (111),
		.OUT_PKT_TRANS_EXCLUSIVE       (62),
		.OUT_PKT_BURST_TYPE_H          (83),
		.OUT_PKT_BURST_TYPE_L          (82),
		.OUT_PKT_ORI_BURST_SIZE_L      (113),
		.OUT_PKT_ORI_BURST_SIZE_H      (115),
		.OUT_ST_DATA_W                 (116),
		.ST_CHANNEL_W                  (3),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (1)
	) width_adapter (
		.clk                  (hps_0_h2f_user0_clock_clk),                    //       clk.clk
		.reset                (sysid_qsys_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_valid             (id_router_002_src_valid),                      //      sink.valid
		.in_channel           (id_router_002_src_channel),                    //          .channel
		.in_startofpacket     (id_router_002_src_startofpacket),              //          .startofpacket
		.in_endofpacket       (id_router_002_src_endofpacket),                //          .endofpacket
		.in_ready             (id_router_002_src_ready),                      //          .ready
		.in_data              (id_router_002_src_data),                       //          .data
		.out_endofpacket      (width_adapter_src_endofpacket),                //       src.endofpacket
		.out_data             (width_adapter_src_data),                       //          .data
		.out_channel          (width_adapter_src_channel),                    //          .channel
		.out_valid            (width_adapter_src_valid),                      //          .valid
		.out_ready            (width_adapter_src_ready),                      //          .ready
		.out_startofpacket    (width_adapter_src_startofpacket),              //          .startofpacket
		.in_command_size_data (3'b000)                                        // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (56),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (71),
		.IN_PKT_BYTE_CNT_L             (63),
		.IN_PKT_TRANS_COMPRESSED_READ  (57),
		.IN_PKT_BURSTWRAP_H            (78),
		.IN_PKT_BURSTWRAP_L            (72),
		.IN_PKT_BURST_SIZE_H           (81),
		.IN_PKT_BURST_SIZE_L           (79),
		.IN_PKT_RESPONSE_STATUS_H      (112),
		.IN_PKT_RESPONSE_STATUS_L      (111),
		.IN_PKT_TRANS_EXCLUSIVE        (62),
		.IN_PKT_BURST_TYPE_H           (83),
		.IN_PKT_BURST_TYPE_L           (82),
		.IN_PKT_ORI_BURST_SIZE_L       (113),
		.IN_PKT_ORI_BURST_SIZE_H       (115),
		.IN_ST_DATA_W                  (116),
		.OUT_PKT_ADDR_H                (164),
		.OUT_PKT_ADDR_L                (144),
		.OUT_PKT_DATA_H                (127),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (143),
		.OUT_PKT_BYTEEN_L              (128),
		.OUT_PKT_BYTE_CNT_H            (179),
		.OUT_PKT_BYTE_CNT_L            (171),
		.OUT_PKT_TRANS_COMPRESSED_READ (165),
		.OUT_PKT_BURST_SIZE_H          (189),
		.OUT_PKT_BURST_SIZE_L          (187),
		.OUT_PKT_RESPONSE_STATUS_H     (220),
		.OUT_PKT_RESPONSE_STATUS_L     (219),
		.OUT_PKT_TRANS_EXCLUSIVE       (170),
		.OUT_PKT_BURST_TYPE_H          (191),
		.OUT_PKT_BURST_TYPE_L          (190),
		.OUT_PKT_ORI_BURST_SIZE_L      (221),
		.OUT_PKT_ORI_BURST_SIZE_H      (223),
		.OUT_ST_DATA_W                 (224),
		.ST_CHANNEL_W                  (3),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (0)
	) width_adapter_001 (
		.clk                  (hps_0_h2f_user0_clock_clk),                    //       clk.clk
		.reset                (sysid_qsys_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_valid             (cmd_xbar_mux_002_src_valid),                   //      sink.valid
		.in_channel           (cmd_xbar_mux_002_src_channel),                 //          .channel
		.in_startofpacket     (cmd_xbar_mux_002_src_startofpacket),           //          .startofpacket
		.in_endofpacket       (cmd_xbar_mux_002_src_endofpacket),             //          .endofpacket
		.in_ready             (cmd_xbar_mux_002_src_ready),                   //          .ready
		.in_data              (cmd_xbar_mux_002_src_data),                    //          .data
		.out_endofpacket      (width_adapter_001_src_endofpacket),            //       src.endofpacket
		.out_data             (width_adapter_001_src_data),                   //          .data
		.out_channel          (width_adapter_001_src_channel),                //          .channel
		.out_valid            (width_adapter_001_src_valid),                  //          .valid
		.out_ready            (width_adapter_001_src_ready),                  //          .ready
		.out_startofpacket    (width_adapter_001_src_startofpacket),          //          .startofpacket
		.in_command_size_data (3'b000)                                        // (terminated)
	);

endmodule
